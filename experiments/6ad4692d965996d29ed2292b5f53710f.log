2020-04-10 20:10:30,487 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:10:51,614 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:10:51,616 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:10:51,617 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:10:55,576 - root - INFO - Starting with 256 cores
2020-04-10 20:11:00,623 - root - DEBUG - 5: Up Workers: 127, Busy Workers: 127
2020-04-10 20:11:00,623 - root - INFO - Waiting: 104, Currently Processing: 127
2020-04-10 20:11:00,623 - root - INFO - 5: Up Workers: 127, Busy Workers: 127
2020-04-10 20:11:05,673 - root - DEBUG - 10: Up Workers: 127, Busy Workers: 1
2020-04-10 20:11:05,673 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:11:05,673 - root - INFO - 10: Up Workers: 127, Busy Workers: 1
2020-04-10 20:11:10,728 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:11:10,728 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:11:10,728 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:11:11,127 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:11:11,127 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:11:32,756 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:11:32,756 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:11:32,757 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:11:32,757 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:11:32,758 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:11:32,758 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:11:36,498 - root - INFO - Starting with 256 cores
2020-04-10 20:11:36,498 - root - INFO - Starting with 256 cores
2020-04-10 20:11:41,585 - root - DEBUG - 5: Up Workers: 254, Busy Workers: 248
2020-04-10 20:11:41,585 - root - DEBUG - 5: Up Workers: 254, Busy Workers: 248
2020-04-10 20:11:41,586 - root - INFO - Waiting: 0, Currently Processing: 248
2020-04-10 20:11:41,586 - root - INFO - Waiting: 0, Currently Processing: 248
2020-04-10 20:11:41,586 - root - INFO - 5: Up Workers: 254, Busy Workers: 248
2020-04-10 20:11:41,586 - root - INFO - 5: Up Workers: 254, Busy Workers: 248
2020-04-10 20:11:46,676 - root - DEBUG - 10: Up Workers: 255, Busy Workers: 43
2020-04-10 20:11:46,676 - root - DEBUG - 10: Up Workers: 255, Busy Workers: 43
2020-04-10 20:11:46,676 - root - INFO - Waiting: 0, Currently Processing: 43
2020-04-10 20:11:46,676 - root - INFO - Waiting: 0, Currently Processing: 43
2020-04-10 20:11:46,676 - root - INFO - 10: Up Workers: 255, Busy Workers: 43
2020-04-10 20:11:46,676 - root - INFO - 10: Up Workers: 255, Busy Workers: 43
2020-04-10 20:11:51,725 - root - DEBUG - 15: Up Workers: 255, Busy Workers: 1
2020-04-10 20:11:51,725 - root - DEBUG - 15: Up Workers: 255, Busy Workers: 1
2020-04-10 20:11:51,726 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:11:51,726 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:11:51,726 - root - INFO - 15: Up Workers: 255, Busy Workers: 1
2020-04-10 20:11:51,726 - root - INFO - 15: Up Workers: 255, Busy Workers: 1
2020-04-10 20:11:56,778 - root - DEBUG - 20: Up Workers: 256, Busy Workers: 1
2020-04-10 20:11:56,778 - root - DEBUG - 20: Up Workers: 256, Busy Workers: 1
2020-04-10 20:11:56,778 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:11:56,778 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:11:56,778 - root - INFO - 20: Up Workers: 256, Busy Workers: 1
2020-04-10 20:11:56,778 - root - INFO - 20: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:01,822 - root - DEBUG - 25: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:01,822 - root - DEBUG - 25: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:01,822 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:01,822 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:01,822 - root - INFO - 25: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:01,822 - root - INFO - 25: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:06,881 - root - DEBUG - 30: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:06,881 - root - DEBUG - 30: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:06,882 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:06,882 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:06,882 - root - INFO - 30: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:06,882 - root - INFO - 30: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:11,948 - root - DEBUG - 35: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:11,948 - root - DEBUG - 35: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:11,948 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:11,948 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:11,948 - root - INFO - 35: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:11,948 - root - INFO - 35: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:16,994 - root - DEBUG - 40: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:16,994 - root - DEBUG - 40: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:16,994 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:16,994 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:16,994 - root - INFO - 40: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:16,994 - root - INFO - 40: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:22,045 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:22,045 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:22,045 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:22,045 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:22,046 - root - INFO - 45: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:22,046 - root - INFO - 45: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:27,092 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:27,092 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:27,092 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:27,092 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:27,092 - root - INFO - 50: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:27,092 - root - INFO - 50: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:32,160 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:32,160 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:32,160 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:32,160 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:32,161 - root - INFO - 55: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:32,161 - root - INFO - 55: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:37,202 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:37,202 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:37,202 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:37,202 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:37,202 - root - INFO - 60: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:37,202 - root - INFO - 60: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:42,259 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:42,259 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:42,259 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:42,259 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:42,259 - root - INFO - 65: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:42,259 - root - INFO - 65: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:47,307 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:47,307 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:47,307 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:47,307 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:47,307 - root - INFO - 70: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:47,307 - root - INFO - 70: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:52,357 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:52,357 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:52,357 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:52,357 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:52,357 - root - INFO - 75: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:52,357 - root - INFO - 75: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:57,405 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:57,405 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:57,405 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:57,405 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:12:57,405 - root - INFO - 80: Up Workers: 256, Busy Workers: 1
2020-04-10 20:12:57,405 - root - INFO - 80: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:02,466 - root - DEBUG - 85: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:02,466 - root - DEBUG - 85: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:02,466 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:13:02,466 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:13:02,466 - root - INFO - 85: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:02,466 - root - INFO - 85: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:07,518 - root - DEBUG - 90: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:07,518 - root - DEBUG - 90: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:07,518 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:13:07,518 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:13:07,518 - root - INFO - 90: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:07,518 - root - INFO - 90: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:12,567 - root - DEBUG - 96: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:12,567 - root - DEBUG - 96: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:17,615 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:17,615 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:22,663 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:22,663 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:27,714 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:27,714 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:32,764 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:32,764 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:37,809 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:37,809 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 1
2020-04-10 20:13:37,816 - root - INFO - launching 32 new tasks....
2020-04-10 20:13:37,816 - root - INFO - launching 32 new tasks....
2020-04-10 20:13:42,859 - root - DEBUG - 126: Up Workers: 1, Busy Workers: 1
2020-04-10 20:13:42,859 - root - DEBUG - 126: Up Workers: 1, Busy Workers: 1
2020-04-10 20:13:43,389 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:13:43,389 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:13:43,389 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:14:05,149 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:14:05,149 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:14:05,149 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:14:05,150 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:14:05,150 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:14:05,150 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:14:05,151 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:14:05,151 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:14:05,151 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:14:08,674 - root - INFO - Starting with 256 cores
2020-04-10 20:14:08,674 - root - INFO - Starting with 256 cores
2020-04-10 20:14:08,674 - root - INFO - Starting with 256 cores
2020-04-10 20:14:13,764 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 244
2020-04-10 20:14:13,764 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 244
2020-04-10 20:14:13,764 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 244
2020-04-10 20:14:13,764 - root - INFO - Waiting: 0, Currently Processing: 245
2020-04-10 20:14:13,764 - root - INFO - Waiting: 0, Currently Processing: 245
2020-04-10 20:14:13,764 - root - INFO - Waiting: 0, Currently Processing: 245
2020-04-10 20:14:13,764 - root - INFO - 5: Up Workers: 256, Busy Workers: 244
2020-04-10 20:14:13,764 - root - INFO - 5: Up Workers: 256, Busy Workers: 244
2020-04-10 20:14:13,764 - root - INFO - 5: Up Workers: 256, Busy Workers: 244
2020-04-10 20:14:18,857 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 8
2020-04-10 20:14:18,857 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 8
2020-04-10 20:14:18,857 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 8
2020-04-10 20:14:18,857 - root - INFO - Waiting: 0, Currently Processing: 8
2020-04-10 20:14:18,857 - root - INFO - Waiting: 0, Currently Processing: 8
2020-04-10 20:14:18,857 - root - INFO - Waiting: 0, Currently Processing: 8
2020-04-10 20:14:18,857 - root - INFO - 10: Up Workers: 256, Busy Workers: 8
2020-04-10 20:14:18,857 - root - INFO - 10: Up Workers: 256, Busy Workers: 8
2020-04-10 20:14:18,857 - root - INFO - 10: Up Workers: 256, Busy Workers: 8
2020-04-10 20:14:23,905 - root - DEBUG - 15: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:23,905 - root - DEBUG - 15: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:23,905 - root - DEBUG - 15: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:23,905 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:23,905 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:23,905 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:23,905 - root - INFO - 15: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:23,905 - root - INFO - 15: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:23,905 - root - INFO - 15: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:28,951 - root - DEBUG - 20: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:28,951 - root - DEBUG - 20: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:28,951 - root - DEBUG - 20: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:28,951 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:28,951 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:28,951 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:28,951 - root - INFO - 20: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:28,951 - root - INFO - 20: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:28,951 - root - INFO - 20: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:33,999 - root - DEBUG - 25: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:33,999 - root - DEBUG - 25: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:33,999 - root - DEBUG - 25: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:33,999 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:33,999 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:33,999 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:33,999 - root - INFO - 25: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:33,999 - root - INFO - 25: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:33,999 - root - INFO - 25: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:39,044 - root - DEBUG - 30: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:39,044 - root - DEBUG - 30: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:39,044 - root - DEBUG - 30: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:39,044 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:39,044 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:39,044 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:39,045 - root - INFO - 30: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:39,045 - root - INFO - 30: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:39,045 - root - INFO - 30: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:44,090 - root - DEBUG - 35: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:44,090 - root - DEBUG - 35: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:44,090 - root - DEBUG - 35: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:44,090 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:44,090 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:44,090 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:44,090 - root - INFO - 35: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:44,090 - root - INFO - 35: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:44,090 - root - INFO - 35: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:49,144 - root - DEBUG - 40: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:49,144 - root - DEBUG - 40: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:49,144 - root - DEBUG - 40: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:49,144 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:49,144 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:49,144 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:49,144 - root - INFO - 40: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:49,144 - root - INFO - 40: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:49,144 - root - INFO - 40: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:54,189 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:54,189 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:54,189 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:54,189 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:54,189 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:54,189 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:54,190 - root - INFO - 45: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:54,190 - root - INFO - 45: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:54,190 - root - INFO - 45: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:59,244 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:59,244 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:59,244 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:59,244 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:59,244 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:59,244 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:14:59,244 - root - INFO - 50: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:59,244 - root - INFO - 50: Up Workers: 256, Busy Workers: 2
2020-04-10 20:14:59,244 - root - INFO - 50: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:04,289 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:04,289 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:04,289 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:04,290 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:04,290 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:04,290 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:04,290 - root - INFO - 55: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:04,290 - root - INFO - 55: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:04,290 - root - INFO - 55: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:09,372 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:09,372 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:09,372 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:09,373 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:09,373 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:09,373 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:09,373 - root - INFO - 60: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:09,373 - root - INFO - 60: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:09,373 - root - INFO - 60: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:14,418 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:14,418 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:14,418 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:14,418 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:14,418 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:14,418 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:14,418 - root - INFO - 65: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:14,418 - root - INFO - 65: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:14,418 - root - INFO - 65: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:19,467 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:19,467 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:19,467 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:19,467 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:19,467 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:19,467 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:19,468 - root - INFO - 70: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:19,468 - root - INFO - 70: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:19,468 - root - INFO - 70: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:24,517 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:24,517 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:24,517 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:24,517 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:24,517 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:24,517 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:24,517 - root - INFO - 75: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:24,517 - root - INFO - 75: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:24,517 - root - INFO - 75: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:29,563 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:29,563 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:29,563 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:29,563 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:29,563 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:29,563 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:29,563 - root - INFO - 80: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:29,563 - root - INFO - 80: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:29,563 - root - INFO - 80: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:34,609 - root - DEBUG - 85: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:34,609 - root - DEBUG - 85: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:34,609 - root - DEBUG - 85: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:34,609 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:34,609 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:34,609 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:34,609 - root - INFO - 85: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:34,609 - root - INFO - 85: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:34,609 - root - INFO - 85: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:39,655 - root - DEBUG - 90: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:39,655 - root - DEBUG - 90: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:39,655 - root - DEBUG - 90: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:39,655 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:39,655 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:39,655 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:39,655 - root - INFO - 90: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:39,655 - root - INFO - 90: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:39,655 - root - INFO - 90: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:44,703 - root - DEBUG - 95: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:44,703 - root - DEBUG - 95: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:44,703 - root - DEBUG - 95: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:44,703 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:44,703 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:44,703 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-10 20:15:44,703 - root - INFO - 95: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:44,703 - root - INFO - 95: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:44,703 - root - INFO - 95: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:49,787 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:49,787 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:49,787 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:54,839 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:54,839 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:54,839 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:59,885 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:59,885 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 2
2020-04-10 20:15:59,885 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:04,932 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:04,932 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:04,932 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:10,071 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:10,071 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:10,071 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 2
2020-04-10 20:16:10,078 - root - INFO - launching 32 new tasks....
2020-04-10 20:16:10,078 - root - INFO - launching 32 new tasks....
2020-04-10 20:16:10,078 - root - INFO - launching 32 new tasks....
2020-04-10 20:16:15,120 - root - DEBUG - 126: Up Workers: 285, Busy Workers: 2
2020-04-10 20:16:15,120 - root - DEBUG - 126: Up Workers: 285, Busy Workers: 2
2020-04-10 20:16:15,120 - root - DEBUG - 126: Up Workers: 285, Busy Workers: 2
2020-04-10 20:16:15,544 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:15,544 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:15,544 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:15,544 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:36,727 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:16:36,727 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:16:36,727 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:16:36,727 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:16:36,729 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:16:36,729 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:16:36,729 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:16:36,729 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:16:36,729 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:16:36,729 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:16:36,729 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:16:36,729 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:16:40,972 - root - INFO - Starting with 256 cores
2020-04-10 20:16:40,972 - root - INFO - Starting with 256 cores
2020-04-10 20:16:40,972 - root - INFO - Starting with 256 cores
2020-04-10 20:16:40,972 - root - INFO - Starting with 256 cores
2020-04-10 20:16:46,165 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - INFO - Waiting: 0, Currently Processing: 246
2020-04-10 20:16:46,165 - root - INFO - Waiting: 0, Currently Processing: 246
2020-04-10 20:16:46,165 - root - INFO - Waiting: 0, Currently Processing: 246
2020-04-10 20:16:46,165 - root - INFO - Waiting: 0, Currently Processing: 246
2020-04-10 20:16:46,165 - root - INFO - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - INFO - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - INFO - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:46,165 - root - INFO - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 20:16:51,260 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,260 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,260 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,260 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,260 - root - INFO - Waiting: 0, Currently Processing: 93
2020-04-10 20:16:51,260 - root - INFO - Waiting: 0, Currently Processing: 93
2020-04-10 20:16:51,260 - root - INFO - Waiting: 0, Currently Processing: 93
2020-04-10 20:16:51,260 - root - INFO - Waiting: 0, Currently Processing: 93
2020-04-10 20:16:51,261 - root - INFO - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,261 - root - INFO - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,261 - root - INFO - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:51,261 - root - INFO - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:16:56,824 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:16:56,824 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:16:56,824 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:16:56,824 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:16:56,824 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:56,824 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:16:57,282 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:57,282 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:57,282 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:57,282 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:16:57,282 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:17:18,441 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:17:18,441 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:17:18,441 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:17:18,441 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:17:18,441 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:17:18,442 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:17:18,442 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:17:18,442 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:17:18,442 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:17:18,442 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:17:18,443 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:17:18,443 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:17:18,443 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:17:18,443 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:17:18,443 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fd084a3c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:17:22,080 - root - INFO - Starting with 256 cores
2020-04-10 20:17:22,080 - root - INFO - Starting with 256 cores
2020-04-10 20:17:22,080 - root - INFO - Starting with 256 cores
2020-04-10 20:17:22,080 - root - INFO - Starting with 256 cores
2020-04-10 20:17:22,080 - root - INFO - Starting with 256 cores
2020-04-10 20:17:27,255 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - INFO - Waiting: 0, Currently Processing: 244
2020-04-10 20:17:27,255 - root - INFO - Waiting: 0, Currently Processing: 244
2020-04-10 20:17:27,255 - root - INFO - Waiting: 0, Currently Processing: 244
2020-04-10 20:17:27,255 - root - INFO - Waiting: 0, Currently Processing: 244
2020-04-10 20:17:27,255 - root - INFO - Waiting: 0, Currently Processing: 244
2020-04-10 20:17:27,255 - root - INFO - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - INFO - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - INFO - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - INFO - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:27,255 - root - INFO - 5: Up Workers: 256, Busy Workers: 241
2020-04-10 20:17:32,579 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - INFO - Waiting: 0, Currently Processing: 16
2020-04-10 20:17:32,579 - root - INFO - Waiting: 0, Currently Processing: 16
2020-04-10 20:17:32,579 - root - INFO - Waiting: 0, Currently Processing: 16
2020-04-10 20:17:32,579 - root - INFO - Waiting: 0, Currently Processing: 16
2020-04-10 20:17:32,579 - root - INFO - Waiting: 0, Currently Processing: 16
2020-04-10 20:17:32,579 - root - INFO - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - INFO - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - INFO - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - INFO - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:32,579 - root - INFO - 10: Up Workers: 256, Busy Workers: 16
2020-04-10 20:17:37,628 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,628 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,628 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,628 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,628 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,629 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:17:37,629 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:17:37,629 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:17:37,629 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:17:37,629 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:17:37,629 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,629 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,629 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,629 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:17:37,629 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:18:49,204 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:19:11,360 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:19:11,361 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:19:11,362 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:19:14,991 - root - INFO - Starting with 256 cores
2020-04-10 20:19:20,086 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 245
2020-04-10 20:19:20,087 - root - INFO - Waiting: 0, Currently Processing: 246
2020-04-10 20:19:20,087 - root - INFO - 5: Up Workers: 256, Busy Workers: 245
2020-04-10 20:19:25,180 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:19:25,181 - root - INFO - Waiting: 0, Currently Processing: 246
2020-04-10 20:19:25,181 - root - INFO - 10: Up Workers: 256, Busy Workers: 93
2020-04-10 20:19:30,313 - root - DEBUG - 15: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:30,313 - root - INFO - Waiting: 0, Currently Processing: 92
2020-04-10 20:19:30,313 - root - INFO - 15: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:35,360 - root - DEBUG - 20: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:35,360 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:19:35,361 - root - INFO - 20: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:40,412 - root - DEBUG - 25: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:40,412 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:19:40,412 - root - INFO - 25: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:45,459 - root - DEBUG - 30: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:45,459 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:19:45,459 - root - INFO - 30: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:50,516 - root - DEBUG - 35: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:50,516 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:19:50,516 - root - INFO - 35: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:55,568 - root - DEBUG - 40: Up Workers: 256, Busy Workers: 1
2020-04-10 20:19:55,568 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:19:55,568 - root - INFO - 40: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:00,616 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:00,616 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:00,616 - root - INFO - 45: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:05,661 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:05,661 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:05,661 - root - INFO - 50: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:10,708 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:10,708 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:10,708 - root - INFO - 55: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:15,753 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:15,753 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:15,753 - root - INFO - 60: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:20,798 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:20,799 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:20,799 - root - INFO - 65: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:25,886 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:25,886 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:25,886 - root - INFO - 70: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:30,933 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:30,933 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:30,933 - root - INFO - 75: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:35,978 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:35,979 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:20:35,979 - root - INFO - 80: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:41,032 - root - DEBUG - 86: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:46,073 - root - DEBUG - 91: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:51,123 - root - DEBUG - 96: Up Workers: 256, Busy Workers: 1
2020-04-10 20:20:56,172 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 1
2020-04-10 20:21:01,217 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 1
2020-04-10 20:21:06,337 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 1
2020-04-10 20:21:11,384 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 1
2020-04-10 20:21:16,430 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 1
2020-04-10 20:21:16,438 - root - INFO - launching 32 new tasks....
2020-04-10 20:21:21,477 - root - DEBUG - 126: Up Workers: 1, Busy Workers: 1
2020-04-10 20:21:21,967 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:21:21,967 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:21:43,659 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:21:43,659 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:21:43,660 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:21:43,660 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:21:43,661 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:21:43,661 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:21:47,582 - root - INFO - Starting with 256 cores
2020-04-10 20:21:47,582 - root - INFO - Starting with 256 cores
2020-04-10 20:21:52,672 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 246
2020-04-10 20:21:52,672 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 246
2020-04-10 20:21:52,672 - root - INFO - Waiting: 0, Currently Processing: 247
2020-04-10 20:21:52,672 - root - INFO - Waiting: 0, Currently Processing: 247
2020-04-10 20:21:52,673 - root - INFO - 5: Up Workers: 256, Busy Workers: 246
2020-04-10 20:21:52,673 - root - INFO - 5: Up Workers: 256, Busy Workers: 246
2020-04-10 20:21:57,766 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 56
2020-04-10 20:21:57,766 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 56
2020-04-10 20:21:57,766 - root - INFO - Waiting: 0, Currently Processing: 247
2020-04-10 20:21:57,766 - root - INFO - Waiting: 0, Currently Processing: 247
2020-04-10 20:21:57,767 - root - INFO - 10: Up Workers: 256, Busy Workers: 56
2020-04-10 20:21:57,767 - root - INFO - 10: Up Workers: 256, Busy Workers: 56
2020-04-10 20:22:02,819 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:02,819 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:02,819 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:22:02,819 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:22:02,819 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:02,819 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:03,215 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:22:03,215 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:22:03,215 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 20:22:24,882 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:22:24,882 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:22:24,882 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:22:24,884 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:22:24,884 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:22:24,884 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:22:24,884 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:22:24,884 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:22:24,884 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb729255400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:22:33,317 - root - INFO - Starting with 256 cores
2020-04-10 20:22:33,317 - root - INFO - Starting with 256 cores
2020-04-10 20:22:33,317 - root - INFO - Starting with 256 cores
2020-04-10 20:22:38,459 - root - DEBUG - 5: Up Workers: 253, Busy Workers: 241
2020-04-10 20:22:38,459 - root - DEBUG - 5: Up Workers: 253, Busy Workers: 241
2020-04-10 20:22:38,459 - root - DEBUG - 5: Up Workers: 253, Busy Workers: 241
2020-04-10 20:22:38,459 - root - INFO - Waiting: 0, Currently Processing: 242
2020-04-10 20:22:38,459 - root - INFO - Waiting: 0, Currently Processing: 242
2020-04-10 20:22:38,459 - root - INFO - Waiting: 0, Currently Processing: 242
2020-04-10 20:22:38,459 - root - INFO - 5: Up Workers: 253, Busy Workers: 241
2020-04-10 20:22:38,459 - root - INFO - 5: Up Workers: 253, Busy Workers: 241
2020-04-10 20:22:38,459 - root - INFO - 5: Up Workers: 253, Busy Workers: 241
2020-04-10 20:22:43,554 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 14
2020-04-10 20:22:43,554 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 14
2020-04-10 20:22:43,554 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 14
2020-04-10 20:22:43,554 - root - INFO - Waiting: 0, Currently Processing: 15
2020-04-10 20:22:43,554 - root - INFO - Waiting: 0, Currently Processing: 15
2020-04-10 20:22:43,554 - root - INFO - Waiting: 0, Currently Processing: 15
2020-04-10 20:22:43,554 - root - INFO - 10: Up Workers: 256, Busy Workers: 14
2020-04-10 20:22:43,554 - root - INFO - 10: Up Workers: 256, Busy Workers: 14
2020-04-10 20:22:43,554 - root - INFO - 10: Up Workers: 256, Busy Workers: 14
2020-04-10 20:22:48,607 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:48,607 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:48,607 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:48,607 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:22:48,607 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:22:48,607 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 20:22:48,607 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:48,607 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 20:22:48,607 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 21:13:19,253 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-10 21:13:41,611 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 21:13:41,612 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f39c9e152f0>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f39c9e152f0>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 21:13:41,613 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f39c9e152f0>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f39c9e152f0>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 21:13:46,057 - root - INFO - Starting with 256 cores
2020-04-10 21:13:51,158 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 21:13:51,158 - root - INFO - Waiting: 0, Currently Processing: 244
2020-04-10 21:13:51,159 - root - INFO - 5: Up Workers: 256, Busy Workers: 243
2020-04-10 21:13:56,262 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 75
2020-04-10 21:13:56,262 - root - INFO - Waiting: 0, Currently Processing: 75
2020-04-10 21:13:56,262 - root - INFO - 10: Up Workers: 256, Busy Workers: 75
2020-04-10 21:14:01,311 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-10 21:14:01,311 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 21:14:01,311 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 17:42:55,457 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 17:43:16,391 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 17:43:16,392 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f2de4660510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f2de4660510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 17:43:16,393 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f2de4660510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f2de4660510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 18:56:13,831 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 18:56:34,294 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 18:56:34,296 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fe0625fe510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fe0625fe510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 18:56:34,296 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fe0625fe510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fe0625fe510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 18:56:38,573 - root - INFO - Starting with 256 cores
2020-04-21 18:56:58,698 - root - DEBUG - 20: Up Workers: 244, Busy Workers: 244
2020-04-21 18:56:58,698 - root - INFO - Waiting: 6, Currently Processing: 244
2020-04-21 18:56:58,698 - root - INFO - 20: Up Workers: 244, Busy Workers: 244
2020-04-21 18:57:03,791 - root - DEBUG - 25: Up Workers: 250, Busy Workers: 7
2020-04-21 18:57:03,791 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-21 18:57:03,791 - root - INFO - 25: Up Workers: 250, Busy Workers: 7
2020-04-21 18:57:08,850 - root - DEBUG - 30: Up Workers: 251, Busy Workers: 6
2020-04-21 18:57:08,851 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:08,851 - root - INFO - 30: Up Workers: 251, Busy Workers: 6
2020-04-21 18:57:13,913 - root - DEBUG - 35: Up Workers: 254, Busy Workers: 6
2020-04-21 18:57:13,913 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:13,913 - root - INFO - 35: Up Workers: 254, Busy Workers: 6
2020-04-21 18:57:18,981 - root - DEBUG - 40: Up Workers: 255, Busy Workers: 6
2020-04-21 18:57:18,981 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:18,981 - root - INFO - 40: Up Workers: 255, Busy Workers: 6
2020-04-21 18:57:24,039 - root - DEBUG - 45: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:24,039 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:24,039 - root - INFO - 45: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:29,099 - root - DEBUG - 50: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:29,099 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:29,099 - root - INFO - 50: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:34,156 - root - DEBUG - 55: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:34,156 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:34,157 - root - INFO - 55: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:39,213 - root - DEBUG - 60: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:39,214 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:39,214 - root - INFO - 60: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:44,270 - root - DEBUG - 65: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:44,270 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:44,270 - root - INFO - 65: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:49,327 - root - DEBUG - 70: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:49,327 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:49,328 - root - INFO - 70: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:54,383 - root - DEBUG - 75: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:54,383 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:54,383 - root - INFO - 75: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:59,444 - root - DEBUG - 80: Up Workers: 256, Busy Workers: 6
2020-04-21 18:57:59,444 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:57:59,444 - root - INFO - 80: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:04,504 - root - DEBUG - 85: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:04,504 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:58:04,504 - root - INFO - 85: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:09,596 - root - DEBUG - 90: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:09,596 - root - INFO - Waiting: 0, Currently Processing: 6
2020-04-21 18:58:09,596 - root - INFO - 90: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:14,653 - root - DEBUG - 96: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:19,709 - root - DEBUG - 101: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:24,769 - root - DEBUG - 106: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:29,829 - root - DEBUG - 111: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:34,886 - root - DEBUG - 116: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:39,981 - root - DEBUG - 121: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:39,995 - root - INFO - launching 32 new tasks....
2020-04-21 18:58:45,044 - root - DEBUG - 126: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:50,103 - root - DEBUG - 131: Up Workers: 256, Busy Workers: 6
2020-04-21 18:58:55,161 - root - DEBUG - 136: Up Workers: 256, Busy Workers: 6
2020-04-21 18:59:00,223 - root - DEBUG - 141: Up Workers: 287, Busy Workers: 7
2020-04-21 18:59:05,292 - root - DEBUG - 146: Up Workers: 0, Busy Workers: 6
2020-04-21 19:03:04,674 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:03:25,769 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:03:25,770 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7faf80f69510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7faf80f69510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:03:25,771 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7faf80f69510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7faf80f69510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:03:30,337 - root - INFO - Starting with 256 cores
2020-04-21 19:03:35,459 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:03:35,459 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:03:35,459 - root - INFO - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:03:40,566 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 95
2020-04-21 19:03:40,566 - root - INFO - Waiting: 0, Currently Processing: 96
2020-04-21 19:03:40,566 - root - INFO - 10: Up Workers: 256, Busy Workers: 95
2020-04-21 19:03:45,664 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:03:45,664 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:03:45,664 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:04:07,817 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:04:28,942 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:04:28,943 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:04:28,944 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:04:34,088 - root - INFO - Starting with 256 cores
2020-04-21 19:04:39,172 - root - DEBUG - 5: Up Workers: 255, Busy Workers: 255
2020-04-21 19:04:39,173 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:04:39,173 - root - INFO - 5: Up Workers: 255, Busy Workers: 255
2020-04-21 19:04:44,297 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 108
2020-04-21 19:04:44,297 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:04:44,297 - root - INFO - 10: Up Workers: 256, Busy Workers: 108
2020-04-21 19:04:49,369 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:04:49,369 - root - INFO - Waiting: 0, Currently Processing: 107
2020-04-21 19:04:49,369 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:04:49,799 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:04:49,799 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:05:11,013 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:05:11,013 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:05:11,014 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:05:11,014 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:05:11,015 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:05:11,015 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:05:15,386 - root - INFO - Starting with 256 cores
2020-04-21 19:05:15,386 - root - INFO - Starting with 256 cores
2020-04-21 19:05:20,483 - root - DEBUG - 5: Up Workers: 255, Busy Workers: 253
2020-04-21 19:05:20,483 - root - DEBUG - 5: Up Workers: 255, Busy Workers: 253
2020-04-21 19:05:20,483 - root - INFO - Waiting: 0, Currently Processing: 254
2020-04-21 19:05:20,483 - root - INFO - Waiting: 0, Currently Processing: 254
2020-04-21 19:05:20,483 - root - INFO - 5: Up Workers: 255, Busy Workers: 253
2020-04-21 19:05:20,483 - root - INFO - 5: Up Workers: 255, Busy Workers: 253
2020-04-21 19:05:25,593 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:05:25,593 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:05:25,594 - root - INFO - Waiting: 0, Currently Processing: 138
2020-04-21 19:05:25,594 - root - INFO - Waiting: 0, Currently Processing: 138
2020-04-21 19:05:25,594 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:05:25,594 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:05:30,894 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:05:30,894 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:05:30,895 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:05:30,895 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:05:30,895 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:05:30,895 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:05:31,316 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:05:31,316 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:05:31,316 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:05:52,615 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:05:52,615 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:05:52,615 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:05:52,616 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:05:52,616 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:05:52,616 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:05:52,617 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:05:52,617 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:05:52,617 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:05:56,854 - root - INFO - Starting with 256 cores
2020-04-21 19:05:56,854 - root - INFO - Starting with 256 cores
2020-04-21 19:05:56,854 - root - INFO - Starting with 256 cores
2020-04-21 19:06:01,953 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 250
2020-04-21 19:06:01,953 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 250
2020-04-21 19:06:01,953 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 250
2020-04-21 19:06:01,954 - root - INFO - Waiting: 0, Currently Processing: 250
2020-04-21 19:06:01,954 - root - INFO - Waiting: 0, Currently Processing: 250
2020-04-21 19:06:01,954 - root - INFO - Waiting: 0, Currently Processing: 250
2020-04-21 19:06:01,954 - root - INFO - 5: Up Workers: 256, Busy Workers: 250
2020-04-21 19:06:01,954 - root - INFO - 5: Up Workers: 256, Busy Workers: 250
2020-04-21 19:06:01,954 - root - INFO - 5: Up Workers: 256, Busy Workers: 250
2020-04-21 19:06:07,359 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 113
2020-04-21 19:06:07,359 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 113
2020-04-21 19:06:07,359 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 113
2020-04-21 19:06:07,360 - root - INFO - Waiting: 0, Currently Processing: 124
2020-04-21 19:06:07,360 - root - INFO - Waiting: 0, Currently Processing: 124
2020-04-21 19:06:07,360 - root - INFO - Waiting: 0, Currently Processing: 124
2020-04-21 19:06:07,360 - root - INFO - 10: Up Workers: 256, Busy Workers: 113
2020-04-21 19:06:07,360 - root - INFO - 10: Up Workers: 256, Busy Workers: 113
2020-04-21 19:06:07,360 - root - INFO - 10: Up Workers: 256, Busy Workers: 113
2020-04-21 19:06:12,415 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 1
2020-04-21 19:06:12,415 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 1
2020-04-21 19:06:12,415 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 1
2020-04-21 19:06:12,415 - root - INFO - Waiting: 0, Currently Processing: 124
2020-04-21 19:06:12,415 - root - INFO - Waiting: 0, Currently Processing: 124
2020-04-21 19:06:12,415 - root - INFO - Waiting: 0, Currently Processing: 124
2020-04-21 19:06:12,415 - root - INFO - 15: Up Workers: 0, Busy Workers: 1
2020-04-21 19:06:12,415 - root - INFO - 15: Up Workers: 0, Busy Workers: 1
2020-04-21 19:06:12,415 - root - INFO - 15: Up Workers: 0, Busy Workers: 1
2020-04-21 19:06:12,899 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:12,899 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:12,899 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:12,899 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:34,261 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:06:34,261 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:06:34,261 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:06:34,261 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:06:34,262 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:06:34,262 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:06:34,262 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:06:34,262 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:06:34,263 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:06:34,263 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:06:34,263 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:06:34,263 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:06:39,040 - root - INFO - Starting with 256 cores
2020-04-21 19:06:39,040 - root - INFO - Starting with 256 cores
2020-04-21 19:06:39,040 - root - INFO - Starting with 256 cores
2020-04-21 19:06:39,040 - root - INFO - Starting with 256 cores
2020-04-21 19:06:44,141 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,141 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,141 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,141 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,141 - root - INFO - Waiting: 0, Currently Processing: 253
2020-04-21 19:06:44,141 - root - INFO - Waiting: 0, Currently Processing: 253
2020-04-21 19:06:44,141 - root - INFO - Waiting: 0, Currently Processing: 253
2020-04-21 19:06:44,141 - root - INFO - Waiting: 0, Currently Processing: 253
2020-04-21 19:06:44,142 - root - INFO - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,142 - root - INFO - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,142 - root - INFO - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:44,142 - root - INFO - 5: Up Workers: 256, Busy Workers: 253
2020-04-21 19:06:49,244 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - INFO - Waiting: 0, Currently Processing: 84
2020-04-21 19:06:49,244 - root - INFO - Waiting: 0, Currently Processing: 84
2020-04-21 19:06:49,244 - root - INFO - Waiting: 0, Currently Processing: 84
2020-04-21 19:06:49,244 - root - INFO - Waiting: 0, Currently Processing: 84
2020-04-21 19:06:49,244 - root - INFO - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - INFO - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - INFO - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:49,244 - root - INFO - 10: Up Workers: 256, Busy Workers: 84
2020-04-21 19:06:54,299 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,299 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,299 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,299 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,299 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:06:54,299 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:06:54,299 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:06:54,299 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:06:54,300 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,300 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,300 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,300 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:06:54,790 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:54,790 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:54,790 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:54,790 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:06:54,790 - root - INFO - Logging to 6ad4692d965996d29ed2292b5f53710f.log
2020-04-21 19:07:15,984 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:07:15,984 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:07:15,984 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:07:15,984 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:07:15,984 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 19:07:15,985 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:07:15,985 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:07:15,985 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:07:15,985 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:07:15,985 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-21 19:07:15,986 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:07:15,986 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:07:15,986 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:07:15,986 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:07:15,986 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc82253b510>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-21 19:07:20,718 - root - INFO - Starting with 256 cores
2020-04-21 19:07:20,718 - root - INFO - Starting with 256 cores
2020-04-21 19:07:20,718 - root - INFO - Starting with 256 cores
2020-04-21 19:07:20,718 - root - INFO - Starting with 256 cores
2020-04-21 19:07:20,718 - root - INFO - Starting with 256 cores
2020-04-21 19:07:25,811 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,811 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,811 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,811 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,811 - root - DEBUG - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,811 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:07:25,811 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:07:25,811 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:07:25,811 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:07:25,811 - root - INFO - Waiting: 0, Currently Processing: 255
2020-04-21 19:07:25,812 - root - INFO - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,812 - root - INFO - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,812 - root - INFO - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,812 - root - INFO - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:25,812 - root - INFO - 5: Up Workers: 256, Busy Workers: 255
2020-04-21 19:07:30,934 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - DEBUG - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - INFO - Waiting: 1, Currently Processing: 140
2020-04-21 19:07:30,934 - root - INFO - Waiting: 1, Currently Processing: 140
2020-04-21 19:07:30,934 - root - INFO - Waiting: 1, Currently Processing: 140
2020-04-21 19:07:30,934 - root - INFO - Waiting: 1, Currently Processing: 140
2020-04-21 19:07:30,934 - root - INFO - Waiting: 1, Currently Processing: 140
2020-04-21 19:07:30,934 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:30,934 - root - INFO - 10: Up Workers: 256, Busy Workers: 138
2020-04-21 19:07:35,996 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,996 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,996 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,996 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,996 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,997 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:07:35,997 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:07:35,997 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:07:35,997 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:07:35,997 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-21 19:07:35,997 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,997 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,997 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,997 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-21 19:07:35,997 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
