2020-04-04 01:58:50,746 - root - INFO - Logging to 00065e4117565bc98e5e22ebc1320904.log
2020-04-04 01:59:12,473 - root - DEBUG - Python AST:
FunctionDef(name='BDFAC',
    args=arguments(
        args=[arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='V_QR', annotation=Name(id='BigMatrix')),
            arg(arg='T_QR', annotation=Name(id='BigMatrix')),
            arg(arg='S_QR', annotation=Name(id='BigMatrix')),
            arg(arg='R_QR', annotation=Name(id='BigMatrix')),
            arg(arg='V_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='T_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='S_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='L_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[Assign(targets=[Name(id='b_fac')], value=Num(n=2)),
        Assign(targets=[Name(id='N_tree_QR_full')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='V_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='T_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='R_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='qr_leaf'),
                                args=[
                                    Subscript(value=Name(id='V_QR'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                    Subscript(value=Name(id='T_QR'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N_tree_QR_full'), op=Add, right=Num(n=1))],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]))),
                                        Subscript(value=Name(id='T_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]))),
                                        Subscript(value=Name(id='R_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='R_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    Name(id='j')]))),
                                    Subscript(value=Name(id='R_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2),
                                                            op=Pow,
                                                            right=BinOp(left=Name(id='level'), op=Sub, right=Num(n=1))))])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='S_QR'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='level'),
                                                                Name(id='j'),
                                                                Name(id='k')]))),
                                                Subscript(value=Name(id='S_QR'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='N_tree_QR_full'),
                                                                BinOp(left=Name(id='j'),
                                                                    op=Add,
                                                                    right=BinOp(left=Num(n=2),
                                                                        op=Pow,
                                                                        right=BinOp(left=Name(id='level'),
                                                                            op=Sub,
                                                                            right=Num(n=1)))),
                                                                Name(id='k')])))])],
                                    value=Call(func=Name(id='qr_trailing_update'),
                                        args=[
                                            Subscript(value=Name(id='V_QR'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]),
                                                    )),
                                            Subscript(value=Name(id='T_QR'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]),
                                                    )),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='j'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)))),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        Assign(targets=[Name(id='N_tree_LQ_full')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(
                        left=Call(func=Name(id='log'),
                            args=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))],
                            keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='k'),
            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='V_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                Subscript(value=Name(id='T_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                Subscript(value=Name(id='L_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')])))])],
                    value=Call(func=Name(id='lq_factor'),
                        args=[
                            Subscript(value=Name(id='S_QR'),
                                slice=Index(
                                    value=Tuple(elts=[Num(n=0), Name(id='N_tree_QR_full'), Num(n=0), Name(id='k')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='lq_leaf'),
                                args=[
                                    Subscript(value=Name(id='V_LQ'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                    Subscript(value=Name(id='T_LQ'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                    Subscript(value=Name(id='S_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0), Name(id='N_tree_QR_full'), Name(id='j'), Name(id='k')])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N_tree_LQ_full'), op=Add, right=Num(n=1))],
                keywords=[]),
            body=[
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]))),
                                        Subscript(value=Name(id='T_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]))),
                                        Subscript(value=Name(id='L_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')])))])],
                            value=Call(func=Name(id='lq_factor'),
                                args=[
                                    Subscript(value=Name(id='L_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    Name(id='k')]))),
                                    Subscript(value=Name(id='L_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    BinOp(left=Name(id='k'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2),
                                                            op=Pow,
                                                            right=BinOp(left=Name(id='level'), op=Sub, right=Num(n=1))))])))],
                                keywords=[])),
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='S_LQ'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='level'),
                                                                Name(id='j'),
                                                                Name(id='k')]))),
                                                Subscript(value=Name(id='S_LQ'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='N_tree_LQ_full'),
                                                                Name(id='j'),
                                                                BinOp(left=Name(id='k'),
                                                                    op=Add,
                                                                    right=BinOp(left=Num(n=2),
                                                                        op=Pow,
                                                                        right=BinOp(left=Name(id='level'),
                                                                            op=Sub,
                                                                            right=Num(n=1))))])))])],
                                    value=Call(func=Name(id='lq_trailing_update'),
                                        args=[
                                            Subscript(value=Name(id='V_LQ'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='T_LQ'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            BinOp(left=Name(id='k'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1),
                    BinOp(left=BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(targets=[Name(id='N_tree_QR')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[BinOp(left=Name(id='N'), op=Sub, right=Name(id='i'))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                Assign(targets=[Name(id='prev_N_tree_LQ')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[BinOp(left=Name(id='N'), op=Sub, right=Name(id='i'))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Name(id='i'), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                        Subscript(value=Name(id='T_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                        Subscript(value=Name(id='R_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='S_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[BinOp(left=Name(id='i'), op=Sub, right=Num(n=1)),
                                                    Name(id='prev_N_tree_LQ'),
                                                    Name(id='j'),
                                                    Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S_QR'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j'), Name(id='k')])))],
                                    value=Call(func=Name(id='qr_leaf'),
                                        args=[
                                            Subscript(value=Name(id='V_QR'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                            Subscript(value=Name(id='T_QR'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[BinOp(left=Name(id='i'), op=Sub, right=Num(n=1)),
                                                            Name(id='prev_N_tree_LQ'),
                                                            Name(id='j'),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                For(target=Name(id='level'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='N_tree_QR'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'),
                                args=[Name(id='i'), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='V_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            ))),
                                                Subscript(value=Name(id='T_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            ))),
                                                Subscript(value=Name(id='R_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            )))])],
                                    value=Call(func=Name(id='qr_factor'),
                                        args=[
                                            Subscript(value=Name(id='R_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j')]))),
                                            Subscript(value=Name(id='R_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='j'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[])),
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Subscript(value=Name(id='S_QR'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='level'),
                                                                        Name(id='j'),
                                                                        Name(id='k')]))),
                                                        Subscript(value=Name(id='S_QR'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='N_tree_QR'),
                                                                        BinOp(left=Name(id='j'),
                                                                            op=Add,
                                                                            right=BinOp(left=Num(n=2),
                                                                                op=Pow,
                                                                                right=BinOp(left=Name(id='level'),
                                                                                    op=Sub,
                                                                                    right=Num(n=1)))),
                                                                        Name(id='k')])))])],
                                            value=Call(func=Name(id='qr_trailing_update'),
                                                args=[
                                                    Subscript(value=Name(id='V_QR'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                                ))),
                                                    Subscript(value=Name(id='T_QR'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                                ))),
                                                    Subscript(value=Name(id='S_QR'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    Name(id='k')]))),
                                                    Subscript(value=Name(id='S_QR'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    BinOp(left=Name(id='j'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Pow,
                                                                            right=BinOp(left=Name(id='level'),
                                                                                op=Sub,
                                                                                right=Num(n=1)))),
                                                                    Name(id='k')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[]),
                Assign(targets=[Name(id='N_tree_LQ')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[
                                        BinOp(left=BinOp(left=Name(id='N'), op=Sub, right=Name(id='i')),
                                            op=Sub,
                                            right=Num(n=1))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                        Subscript(value=Name(id='T_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                        Subscript(value=Name(id='L_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')])))])],
                            value=Call(func=Name(id='lq_factor'),
                                args=[
                                    Subscript(value=Name(id='S_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='i'), Name(id='N_tree_QR'), Name(id='i'), Name(id='k')])))],
                                keywords=[])),
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S_LQ'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j'), Name(id='k')])))],
                                    value=Call(func=Name(id='lq_leaf'),
                                        args=[
                                            Subscript(value=Name(id='V_LQ'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                            Subscript(value=Name(id='T_LQ'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            Name(id='N_tree_QR'),
                                                            Name(id='j'),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                For(target=Name(id='level'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='N_tree_LQ'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    Name(id='N'),
                                    BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='V_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            ))),
                                                Subscript(value=Name(id='T_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            ))),
                                                Subscript(value=Name(id='L_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            )))])],
                                    value=Call(func=Name(id='lq_factor'),
                                        args=[
                                            Subscript(value=Name(id='L_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='L_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='k'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[])),
                                For(target=Name(id='j'),
                                    iter=Call(func=Name(id='range'),
                                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Subscript(value=Name(id='S_LQ'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='level'),
                                                                        Name(id='j'),
                                                                        Name(id='k')]))),
                                                        Subscript(value=Name(id='S_LQ'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='N_tree_LQ'),
                                                                        Name(id='j'),
                                                                        BinOp(left=Name(id='k'),
                                                                            op=Add,
                                                                            right=BinOp(left=Num(n=2),
                                                                                op=Pow,
                                                                                right=BinOp(left=Name(id='level'),
                                                                                    op=Sub,
                                                                                    right=Num(n=1))))])))])],
                                            value=Call(func=Name(id='lq_trailing_update'),
                                                args=[
                                                    Subscript(value=Name(id='V_LQ'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                                ))),
                                                    Subscript(value=Name(id='T_LQ'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                                ))),
                                                    Subscript(value=Name(id='S_LQ'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    Name(id='k')]))),
                                                    Subscript(value=Name(id='S_LQ'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Pow,
                                                                            right=BinOp(left=Name(id='level'),
                                                                                op=Sub,
                                                                                right=Num(n=1))))])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        Assign(
            targets=[
                Tuple(
                    elts=[
                        Subscript(value=Name(id='V_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))]))),
                        Subscript(value=Name(id='T_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))]))),
                        Subscript(value=Name(id='R_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))])))])],
            value=Call(func=Name(id='qr_factor'),
                args=[
                    Subscript(value=Name(id='S_LQ'),
                        slice=Index(
                            value=Tuple(
                                elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=2)),
                                    Num(n=0),
                                    BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                    BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))])))],
                keywords=[]))],
    decorator_list=[],
    returns=None)

2020-04-04 01:59:12,480 - root - DEBUG - IR AST:
FuncDef(name='BDFAC',
    args=['I', 'V_QR', 'T_QR', 'S_QR', 'R_QR', 'V_LQ', 'T_LQ', 'S_LQ', 'L_LQ', 'N', 'truncate'],
    body=[Assign(lhs=Ref(name='b_fac', type=None), rhs=IntConst(val=2, type=None)),
        Assign(lhs=Ref(name='N_tree_QR_full', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None)),
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                    output=[
                        IndexExpr(matrix_name='V_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='T_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='R_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_leaf at 0x7f4a50fc9620>,
                            output=IndexExpr(matrix_name='S_QR',
                                indices=[IntConst(val=0, type=None),
                                    IntConst(val=0, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='level',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_QR_full', type=None),
                right=IntConst(val=1, type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=Ref(name='level', type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=IntConst(val=1, type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f4a50fc9840>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='N_tree_QR_full', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None),
                                                Ref(name='k', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        Assign(lhs=Ref(name='N_tree_LQ_full', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None)),
        For(var='k',
            min=IntConst(val=1, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                    output=[
                        IndexExpr(matrix_name='V_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)]),
                        IndexExpr(matrix_name='T_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)]),
                        IndexExpr(matrix_name='L_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)])],
                    args=[
                        IndexExpr(matrix_name='S_QR',
                            indices=[IntConst(val=0, type=None),
                                Ref(name='N_tree_QR_full', type=None),
                                IntConst(val=0, type=None),
                                Ref(name='k', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_leaf at 0x7f4a50fc9598>,
                            output=IndexExpr(matrix_name='S_LQ',
                                indices=[IntConst(val=0, type=None),
                                    IntConst(val=0, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='N_tree_QR_full', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='level',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_LQ_full', type=None),
                right=IntConst(val=1, type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=Ref(name='level', type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)])],
                            args=[
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='k', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='j',
                            min=IntConst(val=1, type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f4a50fc9950>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='N_tree_LQ_full', type=None),
                                                Ref(name='j', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub',
                left=BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                right=Ref(name='truncate', type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                Assign(lhs=Ref(name='N_tree_QR', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=None),
                                    right=Ref(name='i', type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                Assign(lhs=Ref(name='prev_N_tree_LQ', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=None),
                                    right=Ref(name='i', type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                For(var='j',
                    min=Ref(name='i', type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[
                                        BinOp(op='Sub',
                                            left=Ref(name='i', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='prev_N_tree_LQ', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_leaf at 0x7f4a50fc9620>,
                                    output=IndexExpr(matrix_name='S_QR',
                                        indices=[Ref(name='i', type=None),
                                            IntConst(val=0, type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[
                                                BinOp(op='Sub',
                                                    left=Ref(name='i', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='prev_N_tree_LQ', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])]),
                For(var='level',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_QR', type=None),
                        right=IntConst(val=1, type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='j',
                            min=Ref(name='i', type=None),
                            max=Ref(name='N', type=None),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=None),
                                right=Ref(name='level', type=None),
                                type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                                    output=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None),
                                For(var='k',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=None),
                                        right=IntConst(val=1, type=None),
                                        type=None),
                                    max=Ref(name='N', type=None),
                                    step=IntConst(val=1, type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f4a50fc9840>,
                                            output=[
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='N_tree_QR', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='k', type=None)])],
                                            args=[
                                                IndexExpr(matrix_name='V_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None)]),
                                                IndexExpr(matrix_name='T_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='k', type=None)])],
                                            kwargs=None,
                                            type=None)])])]),
                Assign(lhs=Ref(name='N_tree_LQ', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=BinOp(op='Sub',
                                        left=Ref(name='N', type=None),
                                        right=Ref(name='i', type=None),
                                        type=None),
                                    right=IntConst(val=1, type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                For(var='k',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)])],
                            args=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='N_tree_QR', type=None),
                                        Ref(name='i', type=None),
                                        Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='j',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_leaf at 0x7f4a50fc9598>,
                                    output=IndexExpr(matrix_name='S_LQ',
                                        indices=[Ref(name='i', type=None),
                                            IntConst(val=0, type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='N_tree_QR', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])]),
                For(var='level',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_LQ', type=None),
                        right=IntConst(val=1, type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=None),
                                right=Ref(name='level', type=None),
                                type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                                    output=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None),
                                For(var='j',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=None),
                                        right=IntConst(val=1, type=None),
                                        type=None),
                                    max=Ref(name='N', type=None),
                                    step=IntConst(val=1, type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f4a50fc9950>,
                                            output=[
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='N_tree_LQ', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None)])],
                                            args=[
                                                IndexExpr(matrix_name='V_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='T_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
            output=[
                IndexExpr(matrix_name='V_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)]),
                IndexExpr(matrix_name='T_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)]),
                IndexExpr(matrix_name='R_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)])],
            args=[
                IndexExpr(matrix_name='S_LQ',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=2, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)])],
            kwargs=None,
            type=None)],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-04 01:59:12,511 - root - DEBUG - typed IR AST:
FuncDef(name='BDFAC',
    args=['I', 'V_QR', 'T_QR', 'S_QR', 'R_QR', 'V_LQ', 'T_LQ', 'S_LQ', 'L_LQ', 'N', 'truncate'],
    body=[
        Assign(lhs=Ref(name='b_fac', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>)),
        Assign(
            lhs=Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                    output=[
                        IndexExpr(matrix_name='V_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='T_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='R_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_leaf at 0x7f4a50fc9620>,
                            output=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='level',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f4a50fc9840>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='N_tree_QR_full',
                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        Assign(
            lhs=Ref(name='N_tree_LQ_full', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='k',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                    output=[
                        IndexExpr(matrix_name='V_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='T_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='L_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_leaf at 0x7f4a50fc9598>,
                            output=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='level',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_LQ_full', type=<class 'numpywren.frontend.ConstIntType'>),
                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='j',
                            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f4a50fc9950>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='N_tree_LQ_full',
                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=BinOp(op='Sub',
                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                Assign(lhs=Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                Assign(
                    lhs=Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                For(var='j',
                    min=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[
                                        BinOp(op='Sub',
                                            left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_leaf at 0x7f4a50fc9620>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[
                                                BinOp(op='Sub',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])]),
                For(var='level',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='j',
                            min=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.IntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
                                    output=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>),
                                For(var='k',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f4a50fc9840>,
                                            output=[
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='N_tree_QR',
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='V_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='T_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])]),
                Assign(lhs=Ref(name='N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=BinOp(op='Sub',
                                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                For(var='k',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='j',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_leaf at 0x7f4a50fc9598>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])]),
                For(var='level',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.IntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_factor at 0x7f4a50fc9510>,
                                    output=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>),
                                For(var='j',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f4a50fc9950>,
                                            output=[
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='N_tree_LQ',
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='V_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='T_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        RemoteCallAbstract(compute=<function qr_factor at 0x7f4a50fc9378>,
            output=[
                IndexExpr(matrix_name='V_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)]),
                IndexExpr(matrix_name='T_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)]),
                IndexExpr(matrix_name='R_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='S_LQ',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>)],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-04 02:15:36,580 - root - INFO - Logging to 00065e4117565bc98e5e22ebc1320904.log
2020-04-04 02:15:37,379 - root - DEBUG - Python AST:
FunctionDef(name='BDFAC',
    args=arguments(
        args=[arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='V_QR', annotation=Name(id='BigMatrix')),
            arg(arg='T_QR', annotation=Name(id='BigMatrix')),
            arg(arg='S_QR', annotation=Name(id='BigMatrix')),
            arg(arg='R_QR', annotation=Name(id='BigMatrix')),
            arg(arg='V_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='T_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='S_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='L_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[Assign(targets=[Name(id='b_fac')], value=Num(n=2)),
        Assign(targets=[Name(id='N_tree_QR_full')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='V_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='T_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='R_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='qr_leaf'),
                                args=[
                                    Subscript(value=Name(id='V_QR'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                    Subscript(value=Name(id='T_QR'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N_tree_QR_full'), op=Add, right=Num(n=1))],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]))),
                                        Subscript(value=Name(id='T_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]))),
                                        Subscript(value=Name(id='R_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='R_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    Name(id='j')]))),
                                    Subscript(value=Name(id='R_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2),
                                                            op=Pow,
                                                            right=BinOp(left=Name(id='level'), op=Sub, right=Num(n=1))))])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='S_QR'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='level'),
                                                                Name(id='j'),
                                                                Name(id='k')]))),
                                                Subscript(value=Name(id='S_QR'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='N_tree_QR_full'),
                                                                BinOp(left=Name(id='j'),
                                                                    op=Add,
                                                                    right=BinOp(left=Num(n=2),
                                                                        op=Pow,
                                                                        right=BinOp(left=Name(id='level'),
                                                                            op=Sub,
                                                                            right=Num(n=1)))),
                                                                Name(id='k')])))])],
                                    value=Call(func=Name(id='qr_trailing_update'),
                                        args=[
                                            Subscript(value=Name(id='V_QR'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]),
                                                    )),
                                            Subscript(value=Name(id='T_QR'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]),
                                                    )),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='j'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)))),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        Assign(targets=[Name(id='N_tree_LQ_full')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(
                        left=Call(func=Name(id='log'),
                            args=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))],
                            keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='k'),
            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='V_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                Subscript(value=Name(id='T_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                Subscript(value=Name(id='L_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')])))])],
                    value=Call(func=Name(id='lq_factor'),
                        args=[
                            Subscript(value=Name(id='S_QR'),
                                slice=Index(
                                    value=Tuple(elts=[Num(n=0), Name(id='N_tree_QR_full'), Num(n=0), Name(id='k')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='lq_leaf'),
                                args=[
                                    Subscript(value=Name(id='V_LQ'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                    Subscript(value=Name(id='T_LQ'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                    Subscript(value=Name(id='S_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0), Name(id='N_tree_QR_full'), Name(id='j'), Name(id='k')])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N_tree_LQ_full'), op=Add, right=Num(n=1))],
                keywords=[]),
            body=[
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]))),
                                        Subscript(value=Name(id='T_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]))),
                                        Subscript(value=Name(id='L_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')])))])],
                            value=Call(func=Name(id='lq_factor'),
                                args=[
                                    Subscript(value=Name(id='L_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    Name(id='k')]))),
                                    Subscript(value=Name(id='L_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    BinOp(left=Name(id='k'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2),
                                                            op=Pow,
                                                            right=BinOp(left=Name(id='level'), op=Sub, right=Num(n=1))))])))],
                                keywords=[])),
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='S_LQ'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='level'),
                                                                Name(id='j'),
                                                                Name(id='k')]))),
                                                Subscript(value=Name(id='S_LQ'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='N_tree_LQ_full'),
                                                                Name(id='j'),
                                                                BinOp(left=Name(id='k'),
                                                                    op=Add,
                                                                    right=BinOp(left=Num(n=2),
                                                                        op=Pow,
                                                                        right=BinOp(left=Name(id='level'),
                                                                            op=Sub,
                                                                            right=Num(n=1))))])))])],
                                    value=Call(func=Name(id='lq_trailing_update'),
                                        args=[
                                            Subscript(value=Name(id='V_LQ'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='T_LQ'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            BinOp(left=Name(id='k'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1),
                    BinOp(left=BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(targets=[Name(id='N_tree_QR')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[BinOp(left=Name(id='N'), op=Sub, right=Name(id='i'))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                Assign(targets=[Name(id='prev_N_tree_LQ')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[BinOp(left=Name(id='N'), op=Sub, right=Name(id='i'))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Name(id='i'), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                        Subscript(value=Name(id='T_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                        Subscript(value=Name(id='R_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='S_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[BinOp(left=Name(id='i'), op=Sub, right=Num(n=1)),
                                                    Name(id='prev_N_tree_LQ'),
                                                    Name(id='j'),
                                                    Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S_QR'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j'), Name(id='k')])))],
                                    value=Call(func=Name(id='qr_leaf'),
                                        args=[
                                            Subscript(value=Name(id='V_QR'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                            Subscript(value=Name(id='T_QR'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[BinOp(left=Name(id='i'), op=Sub, right=Num(n=1)),
                                                            Name(id='prev_N_tree_LQ'),
                                                            Name(id='j'),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                For(target=Name(id='level'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='N_tree_QR'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'),
                                args=[Name(id='i'), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='V_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            ))),
                                                Subscript(value=Name(id='T_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            ))),
                                                Subscript(value=Name(id='R_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            )))])],
                                    value=Call(func=Name(id='qr_factor'),
                                        args=[
                                            Subscript(value=Name(id='R_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j')]))),
                                            Subscript(value=Name(id='R_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='j'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[])),
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Subscript(value=Name(id='S_QR'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='level'),
                                                                        Name(id='j'),
                                                                        Name(id='k')]))),
                                                        Subscript(value=Name(id='S_QR'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='N_tree_QR'),
                                                                        BinOp(left=Name(id='j'),
                                                                            op=Add,
                                                                            right=BinOp(left=Num(n=2),
                                                                                op=Pow,
                                                                                right=BinOp(left=Name(id='level'),
                                                                                    op=Sub,
                                                                                    right=Num(n=1)))),
                                                                        Name(id='k')])))])],
                                            value=Call(func=Name(id='qr_trailing_update'),
                                                args=[
                                                    Subscript(value=Name(id='V_QR'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                                ))),
                                                    Subscript(value=Name(id='T_QR'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                                ))),
                                                    Subscript(value=Name(id='S_QR'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    Name(id='k')]))),
                                                    Subscript(value=Name(id='S_QR'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    BinOp(left=Name(id='j'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Pow,
                                                                            right=BinOp(left=Name(id='level'),
                                                                                op=Sub,
                                                                                right=Num(n=1)))),
                                                                    Name(id='k')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[]),
                Assign(targets=[Name(id='N_tree_LQ')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[
                                        BinOp(left=BinOp(left=Name(id='N'), op=Sub, right=Name(id='i')),
                                            op=Sub,
                                            right=Num(n=1))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                        Subscript(value=Name(id='T_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                        Subscript(value=Name(id='L_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')])))])],
                            value=Call(func=Name(id='lq_factor'),
                                args=[
                                    Subscript(value=Name(id='S_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='i'), Name(id='N_tree_QR'), Name(id='i'), Name(id='k')])))],
                                keywords=[])),
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S_LQ'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j'), Name(id='k')])))],
                                    value=Call(func=Name(id='lq_leaf'),
                                        args=[
                                            Subscript(value=Name(id='V_LQ'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                            Subscript(value=Name(id='T_LQ'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            Name(id='N_tree_QR'),
                                                            Name(id='j'),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                For(target=Name(id='level'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='N_tree_LQ'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    Name(id='N'),
                                    BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='V_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            ))),
                                                Subscript(value=Name(id='T_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            ))),
                                                Subscript(value=Name(id='L_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            )))])],
                                    value=Call(func=Name(id='lq_factor'),
                                        args=[
                                            Subscript(value=Name(id='L_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='L_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='k'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[])),
                                For(target=Name(id='j'),
                                    iter=Call(func=Name(id='range'),
                                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Subscript(value=Name(id='S_LQ'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='level'),
                                                                        Name(id='j'),
                                                                        Name(id='k')]))),
                                                        Subscript(value=Name(id='S_LQ'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='N_tree_LQ'),
                                                                        Name(id='j'),
                                                                        BinOp(left=Name(id='k'),
                                                                            op=Add,
                                                                            right=BinOp(left=Num(n=2),
                                                                                op=Pow,
                                                                                right=BinOp(left=Name(id='level'),
                                                                                    op=Sub,
                                                                                    right=Num(n=1))))])))])],
                                            value=Call(func=Name(id='lq_trailing_update'),
                                                args=[
                                                    Subscript(value=Name(id='V_LQ'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                                ))),
                                                    Subscript(value=Name(id='T_LQ'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                                ))),
                                                    Subscript(value=Name(id='S_LQ'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    Name(id='k')]))),
                                                    Subscript(value=Name(id='S_LQ'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Pow,
                                                                            right=BinOp(left=Name(id='level'),
                                                                                op=Sub,
                                                                                right=Num(n=1))))])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        Assign(
            targets=[
                Tuple(
                    elts=[
                        Subscript(value=Name(id='V_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))]))),
                        Subscript(value=Name(id='T_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))]))),
                        Subscript(value=Name(id='R_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))])))])],
            value=Call(func=Name(id='qr_factor'),
                args=[
                    Subscript(value=Name(id='S_LQ'),
                        slice=Index(
                            value=Tuple(
                                elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=2)),
                                    Num(n=0),
                                    BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                    BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))])))],
                keywords=[]))],
    decorator_list=[],
    returns=None)

2020-04-04 02:15:37,386 - root - DEBUG - IR AST:
FuncDef(name='BDFAC',
    args=['I', 'V_QR', 'T_QR', 'S_QR', 'R_QR', 'V_LQ', 'T_LQ', 'S_LQ', 'L_LQ', 'N', 'truncate'],
    body=[Assign(lhs=Ref(name='b_fac', type=None), rhs=IntConst(val=2, type=None)),
        Assign(lhs=Ref(name='N_tree_QR_full', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None)),
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                    output=[
                        IndexExpr(matrix_name='V_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='T_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='R_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_leaf at 0x7f638c5776a8>,
                            output=IndexExpr(matrix_name='S_QR',
                                indices=[IntConst(val=0, type=None),
                                    IntConst(val=0, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='level',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_QR_full', type=None),
                right=IntConst(val=1, type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=Ref(name='level', type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=IntConst(val=1, type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f638c5778c8>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='N_tree_QR_full', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None),
                                                Ref(name='k', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        Assign(lhs=Ref(name='N_tree_LQ_full', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None)),
        For(var='k',
            min=IntConst(val=1, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                    output=[
                        IndexExpr(matrix_name='V_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)]),
                        IndexExpr(matrix_name='T_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)]),
                        IndexExpr(matrix_name='L_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)])],
                    args=[
                        IndexExpr(matrix_name='S_QR',
                            indices=[IntConst(val=0, type=None),
                                Ref(name='N_tree_QR_full', type=None),
                                IntConst(val=0, type=None),
                                Ref(name='k', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_leaf at 0x7f638c577620>,
                            output=IndexExpr(matrix_name='S_LQ',
                                indices=[IntConst(val=0, type=None),
                                    IntConst(val=0, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='N_tree_QR_full', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='level',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_LQ_full', type=None),
                right=IntConst(val=1, type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=Ref(name='level', type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)])],
                            args=[
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='k', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='j',
                            min=IntConst(val=1, type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f638c5779d8>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='N_tree_LQ_full', type=None),
                                                Ref(name='j', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub',
                left=BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                right=Ref(name='truncate', type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                Assign(lhs=Ref(name='N_tree_QR', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=None),
                                    right=Ref(name='i', type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                Assign(lhs=Ref(name='prev_N_tree_LQ', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=None),
                                    right=Ref(name='i', type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                For(var='j',
                    min=Ref(name='i', type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[
                                        BinOp(op='Sub',
                                            left=Ref(name='i', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='prev_N_tree_LQ', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_leaf at 0x7f638c5776a8>,
                                    output=IndexExpr(matrix_name='S_QR',
                                        indices=[Ref(name='i', type=None),
                                            IntConst(val=0, type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[
                                                BinOp(op='Sub',
                                                    left=Ref(name='i', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='prev_N_tree_LQ', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])]),
                For(var='level',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_QR', type=None),
                        right=IntConst(val=1, type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='j',
                            min=Ref(name='i', type=None),
                            max=Ref(name='N', type=None),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=None),
                                right=Ref(name='level', type=None),
                                type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                                    output=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None),
                                For(var='k',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=None),
                                        right=IntConst(val=1, type=None),
                                        type=None),
                                    max=Ref(name='N', type=None),
                                    step=IntConst(val=1, type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f638c5778c8>,
                                            output=[
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='N_tree_QR', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='k', type=None)])],
                                            args=[
                                                IndexExpr(matrix_name='V_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None)]),
                                                IndexExpr(matrix_name='T_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='k', type=None)])],
                                            kwargs=None,
                                            type=None)])])]),
                Assign(lhs=Ref(name='N_tree_LQ', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=BinOp(op='Sub',
                                        left=Ref(name='N', type=None),
                                        right=Ref(name='i', type=None),
                                        type=None),
                                    right=IntConst(val=1, type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                For(var='k',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)])],
                            args=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='N_tree_QR', type=None),
                                        Ref(name='i', type=None),
                                        Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='j',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_leaf at 0x7f638c577620>,
                                    output=IndexExpr(matrix_name='S_LQ',
                                        indices=[Ref(name='i', type=None),
                                            IntConst(val=0, type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='N_tree_QR', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])]),
                For(var='level',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_LQ', type=None),
                        right=IntConst(val=1, type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=None),
                                right=Ref(name='level', type=None),
                                type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                                    output=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None),
                                For(var='j',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=None),
                                        right=IntConst(val=1, type=None),
                                        type=None),
                                    max=Ref(name='N', type=None),
                                    step=IntConst(val=1, type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f638c5779d8>,
                                            output=[
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='N_tree_LQ', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None)])],
                                            args=[
                                                IndexExpr(matrix_name='V_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='T_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
            output=[
                IndexExpr(matrix_name='V_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)]),
                IndexExpr(matrix_name='T_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)]),
                IndexExpr(matrix_name='R_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)])],
            args=[
                IndexExpr(matrix_name='S_LQ',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=2, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)])],
            kwargs=None,
            type=None)],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-04 02:15:37,393 - root - DEBUG - typed IR AST:
FuncDef(name='BDFAC',
    args=['I', 'V_QR', 'T_QR', 'S_QR', 'R_QR', 'V_LQ', 'T_LQ', 'S_LQ', 'L_LQ', 'N', 'truncate'],
    body=[
        Assign(lhs=Ref(name='b_fac', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>)),
        Assign(
            lhs=Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                    output=[
                        IndexExpr(matrix_name='V_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='T_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='R_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_leaf at 0x7f638c5776a8>,
                            output=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='level',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f638c5778c8>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='N_tree_QR_full',
                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        Assign(
            lhs=Ref(name='N_tree_LQ_full', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='k',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                    output=[
                        IndexExpr(matrix_name='V_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='T_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='L_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_leaf at 0x7f638c577620>,
                            output=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='level',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_LQ_full', type=<class 'numpywren.frontend.ConstIntType'>),
                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='j',
                            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f638c5779d8>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='N_tree_LQ_full',
                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=BinOp(op='Sub',
                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                Assign(lhs=Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                Assign(
                    lhs=Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                For(var='j',
                    min=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[
                                        BinOp(op='Sub',
                                            left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_leaf at 0x7f638c5776a8>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[
                                                BinOp(op='Sub',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])]),
                For(var='level',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='j',
                            min=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.IntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
                                    output=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>),
                                For(var='k',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function qr_trailing_update at 0x7f638c5778c8>,
                                            output=[
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='N_tree_QR',
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='V_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='T_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])]),
                Assign(lhs=Ref(name='N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=BinOp(op='Sub',
                                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                For(var='k',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='j',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_leaf at 0x7f638c577620>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])]),
                For(var='level',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.IntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_factor at 0x7f638c577598>,
                                    output=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>),
                                For(var='j',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function lq_trailing_update at 0x7f638c5779d8>,
                                            output=[
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='N_tree_LQ',
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='V_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='T_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        RemoteCallAbstract(compute=<function qr_factor at 0x7f638c577400>,
            output=[
                IndexExpr(matrix_name='V_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)]),
                IndexExpr(matrix_name='T_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)]),
                IndexExpr(matrix_name='R_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='S_LQ',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>)],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-04 02:15:38,246 - root - INFO - Starting with 1 cores
2020-04-04 02:16:14,333 - root - INFO - Logging to 00065e4117565bc98e5e22ebc1320904.log
2020-04-04 02:19:09,024 - root - INFO - Logging to 00065e4117565bc98e5e22ebc1320904.log
2020-04-04 02:23:51,388 - root - INFO - Logging to 00065e4117565bc98e5e22ebc1320904.log
2020-04-04 02:24:13,106 - root - DEBUG - Python AST:
FunctionDef(name='BDFAC',
    args=arguments(
        args=[arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='V_QR', annotation=Name(id='BigMatrix')),
            arg(arg='T_QR', annotation=Name(id='BigMatrix')),
            arg(arg='S_QR', annotation=Name(id='BigMatrix')),
            arg(arg='R_QR', annotation=Name(id='BigMatrix')),
            arg(arg='V_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='T_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='S_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='L_LQ', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[Assign(targets=[Name(id='b_fac')], value=Num(n=2)),
        Assign(targets=[Name(id='N_tree_QR_full')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='V_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='T_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='R_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S_QR'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='qr_leaf'),
                                args=[
                                    Subscript(value=Name(id='V_QR'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                    Subscript(value=Name(id='T_QR'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j')]))),
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N_tree_QR_full'), op=Add, right=Num(n=1))],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]))),
                                        Subscript(value=Name(id='T_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]))),
                                        Subscript(value=Name(id='R_QR'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='R_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    Name(id='j')]))),
                                    Subscript(value=Name(id='R_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2),
                                                            op=Pow,
                                                            right=BinOp(left=Name(id='level'), op=Sub, right=Num(n=1))))])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='S_QR'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='level'),
                                                                Name(id='j'),
                                                                Name(id='k')]))),
                                                Subscript(value=Name(id='S_QR'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='N_tree_QR_full'),
                                                                BinOp(left=Name(id='j'),
                                                                    op=Add,
                                                                    right=BinOp(left=Num(n=2),
                                                                        op=Pow,
                                                                        right=BinOp(left=Name(id='level'),
                                                                            op=Sub,
                                                                            right=Num(n=1)))),
                                                                Name(id='k')])))])],
                                    value=Call(func=Name(id='qr_trailing_update'),
                                        args=[
                                            Subscript(value=Name(id='V_QR'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]),
                                                    )),
                                            Subscript(value=Name(id='T_QR'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='j')]),
                                                    )),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='j'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)))),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        Assign(targets=[Name(id='N_tree_LQ_full')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(
                        left=Call(func=Name(id='log'),
                            args=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))],
                            keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='k'),
            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='V_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                Subscript(value=Name(id='T_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                Subscript(value=Name(id='L_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')])))])],
                    value=Call(func=Name(id='lq_factor'),
                        args=[
                            Subscript(value=Name(id='S_QR'),
                                slice=Index(
                                    value=Tuple(elts=[Num(n=0), Name(id='N_tree_QR_full'), Num(n=0), Name(id='k')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S_LQ'),
                                    slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='lq_leaf'),
                                args=[
                                    Subscript(value=Name(id='V_LQ'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                    Subscript(value=Name(id='T_LQ'),
                                        slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0), Name(id='k')]))),
                                    Subscript(value=Name(id='S_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0), Name(id='N_tree_QR_full'), Name(id='j'), Name(id='k')])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N_tree_LQ_full'), op=Add, right=Num(n=1))],
                keywords=[]),
            body=[
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]))),
                                        Subscript(value=Name(id='T_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]))),
                                        Subscript(value=Name(id='L_LQ'),
                                            slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')])))])],
                            value=Call(func=Name(id='lq_factor'),
                                args=[
                                    Subscript(value=Name(id='L_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    Name(id='k')]))),
                                    Subscript(value=Name(id='L_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Num(n=0),
                                                    BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                    BinOp(left=Name(id='k'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2),
                                                            op=Pow,
                                                            right=BinOp(left=Name(id='level'), op=Sub, right=Num(n=1))))])))],
                                keywords=[])),
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'), args=[Num(n=1), Name(id='N')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='S_LQ'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='level'),
                                                                Name(id='j'),
                                                                Name(id='k')]))),
                                                Subscript(value=Name(id='S_LQ'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Num(n=0),
                                                                Name(id='N_tree_LQ_full'),
                                                                Name(id='j'),
                                                                BinOp(left=Name(id='k'),
                                                                    op=Add,
                                                                    right=BinOp(left=Num(n=2),
                                                                        op=Pow,
                                                                        right=BinOp(left=Name(id='level'),
                                                                            op=Sub,
                                                                            right=Num(n=1))))])))])],
                                    value=Call(func=Name(id='lq_trailing_update'),
                                        args=[
                                            Subscript(value=Name(id='V_LQ'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='T_LQ'),
                                                slice=Index(value=Tuple(elts=[Num(n=0), Name(id='level'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Num(n=0),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j'),
                                                            BinOp(left=Name(id='k'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1),
                    BinOp(left=BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(targets=[Name(id='N_tree_QR')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[BinOp(left=Name(id='N'), op=Sub, right=Name(id='i'))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                Assign(targets=[Name(id='prev_N_tree_LQ')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[BinOp(left=Name(id='N'), op=Sub, right=Name(id='i'))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Name(id='i'), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                        Subscript(value=Name(id='T_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                        Subscript(value=Name(id='R_QR'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='S_LQ'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[BinOp(left=Name(id='i'), op=Sub, right=Num(n=1)),
                                                    Name(id='prev_N_tree_LQ'),
                                                    Name(id='j'),
                                                    Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S_QR'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j'), Name(id='k')])))],
                                    value=Call(func=Name(id='qr_leaf'),
                                        args=[
                                            Subscript(value=Name(id='V_QR'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                            Subscript(value=Name(id='T_QR'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j')]))),
                                            Subscript(value=Name(id='S_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[BinOp(left=Name(id='i'), op=Sub, right=Num(n=1)),
                                                            Name(id='prev_N_tree_LQ'),
                                                            Name(id='j'),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                For(target=Name(id='level'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='N_tree_QR'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'),
                                args=[Name(id='i'), Name(id='N'), BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='V_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            ))),
                                                Subscript(value=Name(id='T_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            ))),
                                                Subscript(value=Name(id='R_QR'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                            )))])],
                                    value=Call(func=Name(id='qr_factor'),
                                        args=[
                                            Subscript(value=Name(id='R_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='j')]))),
                                            Subscript(value=Name(id='R_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='j'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[])),
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Subscript(value=Name(id='S_QR'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='level'),
                                                                        Name(id='j'),
                                                                        Name(id='k')]))),
                                                        Subscript(value=Name(id='S_QR'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='N_tree_QR'),
                                                                        BinOp(left=Name(id='j'),
                                                                            op=Add,
                                                                            right=BinOp(left=Num(n=2),
                                                                                op=Pow,
                                                                                right=BinOp(left=Name(id='level'),
                                                                                    op=Sub,
                                                                                    right=Num(n=1)))),
                                                                        Name(id='k')])))])],
                                            value=Call(func=Name(id='qr_trailing_update'),
                                                args=[
                                                    Subscript(value=Name(id='V_QR'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                                ))),
                                                    Subscript(value=Name(id='T_QR'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='j')],
                                                                ))),
                                                    Subscript(value=Name(id='S_QR'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    Name(id='k')]))),
                                                    Subscript(value=Name(id='S_QR'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    BinOp(left=Name(id='j'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Pow,
                                                                            right=BinOp(left=Name(id='level'),
                                                                                op=Sub,
                                                                                right=Num(n=1)))),
                                                                    Name(id='k')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[]),
                Assign(targets=[Name(id='N_tree_LQ')],
                    value=Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(
                                left=Call(func=Name(id='log'),
                                    args=[
                                        BinOp(left=BinOp(left=Name(id='N'), op=Sub, right=Name(id='i')),
                                            op=Sub,
                                            right=Num(n=1))],
                                    keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='V_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                        Subscript(value=Name(id='T_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                        Subscript(value=Name(id='L_LQ'),
                                            slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')])))])],
                            value=Call(func=Name(id='lq_factor'),
                                args=[
                                    Subscript(value=Name(id='S_QR'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='i'), Name(id='N_tree_QR'), Name(id='i'), Name(id='k')])))],
                                keywords=[])),
                        For(target=Name(id='j'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S_LQ'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='j'), Name(id='k')])))],
                                    value=Call(func=Name(id='lq_leaf'),
                                        args=[
                                            Subscript(value=Name(id='V_LQ'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                            Subscript(value=Name(id='T_LQ'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Num(n=0), Name(id='k')]))),
                                            Subscript(value=Name(id='S_QR'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            Name(id='N_tree_QR'),
                                                            Name(id='j'),
                                                            Name(id='k')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                For(target=Name(id='level'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='N_tree_LQ'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    Name(id='N'),
                                    BinOp(left=Num(n=2), op=Pow, right=Name(id='level'))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Tuple(
                                            elts=[
                                                Subscript(value=Name(id='V_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            ))),
                                                Subscript(value=Name(id='T_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            ))),
                                                Subscript(value=Name(id='L_LQ'),
                                                    slice=Index(
                                                        value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                            )))])],
                                    value=Call(func=Name(id='lq_factor'),
                                        args=[
                                            Subscript(value=Name(id='L_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            Name(id='k')]))),
                                            Subscript(value=Name(id='L_LQ'),
                                                slice=Index(
                                                    value=Tuple(
                                                        elts=[Name(id='i'),
                                                            BinOp(left=Name(id='level'), op=Sub, right=Num(n=1)),
                                                            BinOp(left=Name(id='k'),
                                                                op=Add,
                                                                right=BinOp(left=Num(n=2),
                                                                    op=Pow,
                                                                    right=BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1))))])))],
                                        keywords=[])),
                                For(target=Name(id='j'),
                                    iter=Call(func=Name(id='range'),
                                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)), Name(id='N')],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Tuple(
                                                    elts=[
                                                        Subscript(value=Name(id='S_LQ'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='level'),
                                                                        Name(id='j'),
                                                                        Name(id='k')]))),
                                                        Subscript(value=Name(id='S_LQ'),
                                                            slice=Index(
                                                                value=Tuple(
                                                                    elts=[Name(id='i'),
                                                                        Name(id='N_tree_LQ'),
                                                                        Name(id='j'),
                                                                        BinOp(left=Name(id='k'),
                                                                            op=Add,
                                                                            right=BinOp(left=Num(n=2),
                                                                                op=Pow,
                                                                                right=BinOp(left=Name(id='level'),
                                                                                    op=Sub,
                                                                                    right=Num(n=1))))])))])],
                                            value=Call(func=Name(id='lq_trailing_update'),
                                                args=[
                                                    Subscript(value=Name(id='V_LQ'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                                ))),
                                                    Subscript(value=Name(id='T_LQ'),
                                                        slice=Index(
                                                            value=Tuple(elts=[Name(id='i'), Name(id='level'), Name(id='k')],
                                                                ))),
                                                    Subscript(value=Name(id='S_LQ'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    Name(id='k')]))),
                                                    Subscript(value=Name(id='S_LQ'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    BinOp(left=Name(id='level'),
                                                                        op=Sub,
                                                                        right=Num(n=1)),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Pow,
                                                                            right=BinOp(left=Name(id='level'),
                                                                                op=Sub,
                                                                                right=Num(n=1))))])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        Assign(
            targets=[
                Tuple(
                    elts=[
                        Subscript(value=Name(id='V_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))]))),
                        Subscript(value=Name(id='T_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))]))),
                        Subscript(value=Name(id='R_QR'),
                            slice=Index(
                                value=Tuple(
                                    elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                        Num(n=0),
                                        BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))])))])],
            value=Call(func=Name(id='qr_factor'),
                args=[
                    Subscript(value=Name(id='S_LQ'),
                        slice=Index(
                            value=Tuple(
                                elts=[BinOp(left=Name(id='N'), op=Sub, right=Num(n=2)),
                                    Num(n=0),
                                    BinOp(left=Name(id='N'), op=Sub, right=Num(n=1)),
                                    BinOp(left=Name(id='N'), op=Sub, right=Num(n=1))])))],
                keywords=[]))],
    decorator_list=[],
    returns=None)

2020-04-04 02:24:13,113 - root - DEBUG - IR AST:
FuncDef(name='BDFAC',
    args=['I', 'V_QR', 'T_QR', 'S_QR', 'R_QR', 'V_LQ', 'T_LQ', 'S_LQ', 'L_LQ', 'N', 'truncate'],
    body=[Assign(lhs=Ref(name='b_fac', type=None), rhs=IntConst(val=2, type=None)),
        Assign(lhs=Ref(name='N_tree_QR_full', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None)),
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                    output=[
                        IndexExpr(matrix_name='V_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='T_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='R_QR',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_leaf at 0x7fa32b9a06a8>,
                            output=IndexExpr(matrix_name='S_QR',
                                indices=[IntConst(val=0, type=None),
                                    IntConst(val=0, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='level',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_QR_full', type=None),
                right=IntConst(val=1, type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=Ref(name='level', type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=IntConst(val=1, type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_trailing_update at 0x7fa32b9a08c8>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='N_tree_QR_full', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None),
                                                Ref(name='k', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        Assign(lhs=Ref(name='N_tree_LQ_full', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None)),
        For(var='k',
            min=IntConst(val=1, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                    output=[
                        IndexExpr(matrix_name='V_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)]),
                        IndexExpr(matrix_name='T_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)]),
                        IndexExpr(matrix_name='L_LQ',
                            indices=[IntConst(val=0, type=None), IntConst(val=0, type=None), Ref(name='k', type=None)])],
                    args=[
                        IndexExpr(matrix_name='S_QR',
                            indices=[IntConst(val=0, type=None),
                                Ref(name='N_tree_QR_full', type=None),
                                IntConst(val=0, type=None),
                                Ref(name='k', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_leaf at 0x7fa32b9a0620>,
                            output=IndexExpr(matrix_name='S_LQ',
                                indices=[IntConst(val=0, type=None),
                                    IntConst(val=0, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='N_tree_QR_full', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='level',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_LQ_full', type=None),
                right=IntConst(val=1, type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=Ref(name='level', type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        Ref(name='level', type=None),
                                        Ref(name='k', type=None)])],
                            args=[
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=None),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='k', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='j',
                            min=IntConst(val=1, type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_trailing_update at 0x7fa32b9a09d8>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='N_tree_LQ_full', type=None),
                                                Ref(name='j', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub',
                left=BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                right=Ref(name='truncate', type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                Assign(lhs=Ref(name='N_tree_QR', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=None),
                                    right=Ref(name='i', type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                Assign(lhs=Ref(name='prev_N_tree_LQ', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=None),
                                    right=Ref(name='i', type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                For(var='j',
                    min=Ref(name='i', type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[
                                        BinOp(op='Sub',
                                            left=Ref(name='i', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='prev_N_tree_LQ', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_leaf at 0x7fa32b9a06a8>,
                                    output=IndexExpr(matrix_name='S_QR',
                                        indices=[Ref(name='i', type=None),
                                            IntConst(val=0, type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[
                                                BinOp(op='Sub',
                                                    left=Ref(name='i', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='prev_N_tree_LQ', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])]),
                For(var='level',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_QR', type=None),
                        right=IntConst(val=1, type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='j',
                            min=Ref(name='i', type=None),
                            max=Ref(name='N', type=None),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=None),
                                right=Ref(name='level', type=None),
                                type=None),
                            body=[
                                RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                                    output=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='j', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='j', type=None)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None),
                                For(var='k',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=None),
                                        right=IntConst(val=1, type=None),
                                        type=None),
                                    max=Ref(name='N', type=None),
                                    step=IntConst(val=1, type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function qr_trailing_update at 0x7fa32b9a08c8>,
                                            output=[
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='N_tree_QR', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='k', type=None)])],
                                            args=[
                                                IndexExpr(matrix_name='V_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None)]),
                                                IndexExpr(matrix_name='T_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='k', type=None)])],
                                            kwargs=None,
                                            type=None)])])]),
                Assign(lhs=Ref(name='N_tree_LQ', type=None),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=BinOp(op='Sub',
                                        left=Ref(name='N', type=None),
                                        right=Ref(name='i', type=None),
                                        type=None),
                                    right=IntConst(val=1, type=None),
                                    type=None),
                                type=None),
                            right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                            type=None),
                        type=None)),
                For(var='k',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[Ref(name='i', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='k', type=None)])],
                            args=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='N_tree_QR', type=None),
                                        Ref(name='i', type=None),
                                        Ref(name='k', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='j',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_leaf at 0x7fa32b9a0620>,
                                    output=IndexExpr(matrix_name='S_LQ',
                                        indices=[Ref(name='i', type=None),
                                            IntConst(val=0, type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=None),
                                                IntConst(val=0, type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='N_tree_QR', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)])],
                                    kwargs=None,
                                    type=None)])]),
                For(var='level',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_LQ', type=None),
                        right=IntConst(val=1, type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=Ref(name='N', type=None),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=None),
                                right=Ref(name='level', type=None),
                                type=None),
                            body=[
                                RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                                    output=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='level', type=None),
                                                Ref(name='k', type=None)])],
                                    args=[
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=None),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level', type=None),
                                                    right=IntConst(val=1, type=None),
                                                    type=None),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=None),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2, type=None),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        type=None),
                                                    type=None)])],
                                    kwargs=None,
                                    type=None),
                                For(var='j',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=None),
                                        right=IntConst(val=1, type=None),
                                        type=None),
                                    max=Ref(name='N', type=None),
                                    step=IntConst(val=1, type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function lq_trailing_update at 0x7fa32b9a09d8>,
                                            output=[
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='N_tree_LQ', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None)])],
                                            args=[
                                                IndexExpr(matrix_name='V_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='T_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='level', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=None),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level', type=None),
                                                            right=IntConst(val=1, type=None),
                                                            type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level', type=None),
                                                                    right=IntConst(val=1, type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
            output=[
                IndexExpr(matrix_name='V_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)]),
                IndexExpr(matrix_name='T_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)]),
                IndexExpr(matrix_name='R_QR',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)])],
            args=[
                IndexExpr(matrix_name='S_LQ',
                    indices=[
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=2, type=None), type=None),
                        IntConst(val=0, type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None),
                        BinOp(op='Sub', left=Ref(name='N', type=None), right=IntConst(val=1, type=None), type=None)])],
            kwargs=None,
            type=None)],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-04 02:24:13,144 - root - DEBUG - typed IR AST:
FuncDef(name='BDFAC',
    args=['I', 'V_QR', 'T_QR', 'S_QR', 'R_QR', 'V_LQ', 'T_LQ', 'S_LQ', 'L_LQ', 'N', 'truncate'],
    body=[
        Assign(lhs=Ref(name='b_fac', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>)),
        Assign(
            lhs=Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                    output=[
                        IndexExpr(matrix_name='V_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='T_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='R_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_leaf at 0x7fa32b9a06a8>,
                            output=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='level',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_trailing_update at 0x7fa32b9a08c8>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='N_tree_QR_full',
                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        Assign(
            lhs=Ref(name='N_tree_LQ_full', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='k',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                    output=[
                        IndexExpr(matrix_name='V_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='T_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='L_LQ',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S_QR',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_leaf at 0x7fa32b9a0620>,
                            output=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S_QR',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='N_tree_QR_full', type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='level',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Add',
                left=Ref(name='N_tree_LQ_full', type=<class 'numpywren.frontend.ConstIntType'>),
                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        BinOp(op='Sub',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='j',
                            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_trailing_update at 0x7fa32b9a09d8>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='N_tree_LQ_full',
                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=BinOp(op='Sub',
                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                Assign(lhs=Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                Assign(
                    lhs=Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                For(var='j',
                    min=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                            output=[
                                IndexExpr(matrix_name='V_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='R_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='S_LQ',
                                    indices=[
                                        BinOp(op='Sub',
                                            left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_leaf at 0x7fa32b9a06a8>,
                                    output=[
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[
                                                BinOp(op='Sub',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='prev_N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])]),
                For(var='level',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='j',
                            min=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.IntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
                                    output=[
                                        IndexExpr(matrix_name='V_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='R_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>),
                                For(var='k',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function qr_trailing_update at 0x7fa32b9a08c8>,
                                            output=[
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='N_tree_QR',
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='V_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='T_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_QR',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='j',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])]),
                Assign(lhs=Ref(name='N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                    rhs=Mfunc(op='ceiling',
                        e=BinOp(op='Div',
                            left=Mfunc(op='log',
                                e=BinOp(op='Sub',
                                    left=BinOp(op='Sub',
                                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.FloatType'>),
                            right=Mfunc(op='log',
                                e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.ConstFloatType'>),
                            type=<class 'numpywren.frontend.FloatType'>),
                        type=<class 'numpywren.frontend.IntType'>)),
                For(var='k',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                            output=[
                                IndexExpr(matrix_name='V_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='T_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='L_LQ',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='S_QR',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='j',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_leaf at 0x7fa32b9a0620>,
                                    output=[
                                        IndexExpr(matrix_name='S_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='S_QR',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='N_tree_QR', type=<class 'numpywren.frontend.IntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])]),
                For(var='level',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='N_tree_LQ', type=<class 'numpywren.frontend.IntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=BinOp(op='Pow',
                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                right=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                type=<class 'numpywren.frontend.IntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function lq_factor at 0x7fa32b9a0598>,
                                    output=[
                                        IndexExpr(matrix_name='V_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='T_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='L_LQ',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Sub',
                                                    left=Ref(name='level',
                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                BinOp(op='Add',
                                                    left=Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=BinOp(op='Pow',
                                                        left=IntConst(val=2,
                                                            type=<class 'numpywren.frontend.ConstIntType'>),
                                                        right=BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        type=<class 'numpywren.frontend.IntType'>),
                                                    type=<class 'numpywren.frontend.IntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>),
                                For(var='j',
                                    min=BinOp(op='Add',
                                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function lq_trailing_update at 0x7fa32b9a09d8>,
                                            output=[
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='N_tree_LQ',
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='V_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='T_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='S_LQ',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Sub',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Sub',
                                                                    left=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    right=IntConst(val=1,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        RemoteCallAbstract(compute=<function qr_factor at 0x7fa32b9a0400>,
            output=[
                IndexExpr(matrix_name='V_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)]),
                IndexExpr(matrix_name='T_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)]),
                IndexExpr(matrix_name='R_QR',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='S_LQ',
                    indices=[
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>),
                        BinOp(op='Sub',
                            left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>)],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-04 02:24:13,786 - root - INFO - Starting with 1 cores
2020-04-04 02:24:19,054 - root - DEBUG - 5: Up Workers: 1, Busy Workers: 1
2020-04-04 02:24:19,055 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-04 02:24:19,055 - root - INFO - 5: Up Workers: 1, Busy Workers: 1
2020-04-04 02:24:24,110 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-04 02:24:24,110 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-04 02:24:24,110 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
