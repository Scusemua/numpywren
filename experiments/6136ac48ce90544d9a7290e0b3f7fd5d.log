2020-04-09 17:04:01,159 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-09 17:04:07,345 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 17:04:07,346 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f4394e9b400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f4394e9b400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 17:04:07,347 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f4394e9b400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f4394e9b400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 17:04:08,246 - root - INFO - Starting with 32 cores
2020-04-09 17:04:13,297 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-09 17:04:13,297 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-09 17:04:13,297 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-09 17:04:18,350 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 3
2020-04-09 17:04:18,350 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-09 17:04:18,350 - root - INFO - 10: Up Workers: 32, Busy Workers: 3
2020-04-09 17:04:23,406 - root - DEBUG - 15: Up Workers: 32, Busy Workers: 3
2020-04-09 17:04:23,407 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-09 17:04:23,407 - root - INFO - 15: Up Workers: 32, Busy Workers: 3
2020-04-09 17:04:28,462 - root - DEBUG - 20: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:28,462 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-09 17:04:28,462 - root - INFO - 20: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:33,511 - root - DEBUG - 25: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:33,511 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-09 17:04:33,511 - root - INFO - 25: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:38,554 - root - DEBUG - 30: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:38,554 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-09 17:04:38,554 - root - INFO - 30: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:43,608 - root - DEBUG - 35: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:43,609 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-09 17:04:43,609 - root - INFO - 35: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:49,656 - root - DEBUG - 40: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:49,656 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-09 17:04:49,656 - root - INFO - 40: Up Workers: 32, Busy Workers: 2
2020-04-09 17:04:54,703 - root - DEBUG - 46: Up Workers: 32, Busy Workers: 1
2020-04-09 17:04:59,781 - root - DEBUG - 51: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:04,834 - root - DEBUG - 56: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:09,881 - root - DEBUG - 61: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:14,934 - root - DEBUG - 66: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:19,984 - root - DEBUG - 71: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:25,033 - root - DEBUG - 76: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:30,079 - root - DEBUG - 81: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:35,131 - root - DEBUG - 86: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:40,184 - root - DEBUG - 91: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:45,231 - root - DEBUG - 96: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:50,277 - root - DEBUG - 102: Up Workers: 32, Busy Workers: 1
2020-04-09 17:05:55,446 - root - DEBUG - 107: Up Workers: 32, Busy Workers: 1
2020-04-09 17:06:00,493 - root - DEBUG - 112: Up Workers: 32, Busy Workers: 1
2020-04-09 17:06:05,543 - root - DEBUG - 117: Up Workers: 32, Busy Workers: 1
2020-04-09 17:06:10,593 - root - DEBUG - 122: Up Workers: 32, Busy Workers: 1
2020-04-09 17:06:10,601 - root - INFO - launching 32 new tasks....
2020-04-09 17:06:15,641 - root - DEBUG - 127: Up Workers: 35, Busy Workers: 2
2020-04-09 17:06:20,695 - root - DEBUG - 132: Up Workers: 35, Busy Workers: 2
2020-04-09 17:06:25,742 - root - DEBUG - 137: Up Workers: 35, Busy Workers: 2
2020-04-09 17:06:30,790 - root - DEBUG - 142: Up Workers: 27, Busy Workers: 2
2020-04-09 17:06:35,839 - root - DEBUG - 147: Up Workers: 22, Busy Workers: 2
2020-04-09 17:06:40,897 - root - DEBUG - 152: Up Workers: 22, Busy Workers: 2
2020-04-09 17:06:45,955 - root - DEBUG - 157: Up Workers: 23, Busy Workers: 2
2020-04-09 17:06:50,998 - root - DEBUG - 162: Up Workers: 23, Busy Workers: 2
2020-04-09 17:06:56,056 - root - DEBUG - 167: Up Workers: 24, Busy Workers: 2
2020-04-09 17:07:01,109 - root - DEBUG - 172: Up Workers: 25, Busy Workers: 2
2020-04-09 17:07:06,160 - root - DEBUG - 177: Up Workers: 26, Busy Workers: 2
2020-04-09 17:07:11,209 - root - DEBUG - 182: Up Workers: 26, Busy Workers: 2
2020-04-09 17:07:16,285 - root - DEBUG - 187: Up Workers: 27, Busy Workers: 2
2020-04-09 17:07:21,338 - root - DEBUG - 193: Up Workers: 28, Busy Workers: 2
2020-04-09 17:07:26,395 - root - DEBUG - 198: Up Workers: 29, Busy Workers: 2
2020-04-09 17:07:31,447 - root - DEBUG - 203: Up Workers: 29, Busy Workers: 2
2020-04-09 17:07:36,496 - root - DEBUG - 208: Up Workers: 29, Busy Workers: 2
2020-04-09 17:07:41,541 - root - DEBUG - 213: Up Workers: 29, Busy Workers: 2
2020-04-09 17:07:46,592 - root - DEBUG - 218: Up Workers: 30, Busy Workers: 2
2020-04-09 17:07:51,643 - root - DEBUG - 223: Up Workers: 31, Busy Workers: 2
2020-04-09 17:07:56,691 - root - DEBUG - 228: Up Workers: 32, Busy Workers: 2
2020-04-09 17:08:01,737 - root - DEBUG - 233: Up Workers: 32, Busy Workers: 2
2020-04-09 17:08:06,783 - root - DEBUG - 238: Up Workers: 33, Busy Workers: 2
2020-04-09 17:08:11,830 - root - DEBUG - 243: Up Workers: 33, Busy Workers: 2
2020-04-09 17:08:11,838 - root - INFO - launching 32 new tasks....
2020-04-09 17:08:16,906 - root - DEBUG - 248: Up Workers: 63, Busy Workers: 3
2020-04-09 17:08:21,955 - root - DEBUG - 253: Up Workers: 63, Busy Workers: 3
2020-04-09 17:08:27,034 - root - DEBUG - 258: Up Workers: 63, Busy Workers: 3
2020-04-09 17:08:32,079 - root - DEBUG - 263: Up Workers: 64, Busy Workers: 3
2020-04-09 17:08:37,125 - root - DEBUG - 268: Up Workers: 61, Busy Workers: 3
2020-04-09 17:08:42,183 - root - DEBUG - 273: Up Workers: 61, Busy Workers: 3
2020-04-09 17:08:47,230 - root - DEBUG - 278: Up Workers: 60, Busy Workers: 3
2020-04-09 17:08:52,278 - root - DEBUG - 283: Up Workers: 46, Busy Workers: 3
2020-04-09 17:08:57,324 - root - DEBUG - 289: Up Workers: 45, Busy Workers: 3
2020-04-09 17:09:02,372 - root - DEBUG - 294: Up Workers: 46, Busy Workers: 3
2020-04-09 17:09:07,418 - root - DEBUG - 299: Up Workers: 45, Busy Workers: 3
2020-04-09 17:09:12,466 - root - DEBUG - 304: Up Workers: 45, Busy Workers: 3
2020-04-09 17:09:17,510 - root - DEBUG - 309: Up Workers: 43, Busy Workers: 3
2020-04-09 17:09:22,557 - root - DEBUG - 314: Up Workers: 43, Busy Workers: 3
2020-04-09 17:09:27,607 - root - DEBUG - 319: Up Workers: 42, Busy Workers: 3
2020-04-09 17:09:32,656 - root - DEBUG - 324: Up Workers: 41, Busy Workers: 3
2020-04-09 17:09:37,700 - root - DEBUG - 329: Up Workers: 41, Busy Workers: 3
2020-04-09 17:09:42,748 - root - DEBUG - 334: Up Workers: 39, Busy Workers: 3
2020-04-09 17:09:47,797 - root - DEBUG - 339: Up Workers: 39, Busy Workers: 3
2020-04-09 17:09:52,846 - root - DEBUG - 344: Up Workers: 40, Busy Workers: 3
2020-04-09 17:09:57,892 - root - DEBUG - 349: Up Workers: 40, Busy Workers: 3
2020-04-09 17:10:02,940 - root - DEBUG - 354: Up Workers: 40, Busy Workers: 3
2020-04-09 17:10:08,018 - root - DEBUG - 359: Up Workers: 39, Busy Workers: 3
2020-04-09 17:10:13,066 - root - DEBUG - 364: Up Workers: 37, Busy Workers: 3
2020-04-09 17:10:13,075 - root - INFO - launching 32 new tasks....
2020-04-09 17:10:18,117 - root - DEBUG - 369: Up Workers: 68, Busy Workers: 4
2020-04-09 17:10:23,168 - root - DEBUG - 374: Up Workers: 68, Busy Workers: 4
2020-04-09 17:10:28,217 - root - DEBUG - 379: Up Workers: 67, Busy Workers: 4
2020-04-09 17:10:33,274 - root - DEBUG - 384: Up Workers: 68, Busy Workers: 4
2020-04-09 17:10:38,322 - root - DEBUG - 390: Up Workers: 39, Busy Workers: 4
2020-04-09 17:10:38,322 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:10:38,322 - root - INFO - 390: Up Workers: 39, Busy Workers: 4
2020-04-09 17:10:43,366 - root - DEBUG - 395: Up Workers: 39, Busy Workers: 4
2020-04-09 17:10:43,367 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:10:43,367 - root - INFO - 395: Up Workers: 39, Busy Workers: 4
2020-04-09 17:10:48,425 - root - DEBUG - 400: Up Workers: 39, Busy Workers: 4
2020-04-09 17:10:48,425 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:10:48,425 - root - INFO - 400: Up Workers: 39, Busy Workers: 4
2020-04-09 17:10:53,482 - root - DEBUG - 405: Up Workers: 38, Busy Workers: 4
2020-04-09 17:10:53,482 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:10:53,482 - root - INFO - 405: Up Workers: 38, Busy Workers: 4
2020-04-09 17:10:58,529 - root - DEBUG - 410: Up Workers: 38, Busy Workers: 4
2020-04-09 17:10:58,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:10:58,529 - root - INFO - 410: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:03,579 - root - DEBUG - 415: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:03,579 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:03,580 - root - INFO - 415: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:08,638 - root - DEBUG - 420: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:08,638 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:08,638 - root - INFO - 420: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:13,690 - root - DEBUG - 425: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:13,690 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:13,690 - root - INFO - 425: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:18,732 - root - DEBUG - 430: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:18,732 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:18,732 - root - INFO - 430: Up Workers: 38, Busy Workers: 4
2020-04-09 17:11:23,790 - root - DEBUG - 435: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:23,791 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:23,791 - root - INFO - 435: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:28,836 - root - DEBUG - 440: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:28,836 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:28,836 - root - INFO - 440: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:33,885 - root - DEBUG - 445: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:33,885 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:33,885 - root - INFO - 445: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:38,931 - root - DEBUG - 450: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:38,931 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:38,931 - root - INFO - 450: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:43,973 - root - DEBUG - 455: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:43,973 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:43,974 - root - INFO - 455: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:49,019 - root - DEBUG - 460: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:49,020 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:49,020 - root - INFO - 460: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:54,069 - root - DEBUG - 465: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:54,069 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:54,069 - root - INFO - 465: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:59,120 - root - DEBUG - 470: Up Workers: 37, Busy Workers: 4
2020-04-09 17:11:59,120 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:11:59,120 - root - INFO - 470: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:04,169 - root - DEBUG - 475: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:04,169 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:12:04,170 - root - INFO - 475: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:09,222 - root - DEBUG - 480: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:09,222 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:12:09,223 - root - INFO - 480: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:14,269 - root - DEBUG - 485: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:14,269 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:12:14,269 - root - INFO - 485: Up Workers: 37, Busy Workers: 4
2020-04-09 17:12:14,277 - root - INFO - launching 32 new tasks....
2020-04-09 17:12:19,358 - root - DEBUG - 491: Up Workers: 69, Busy Workers: 5
2020-04-09 17:12:24,412 - root - DEBUG - 496: Up Workers: 69, Busy Workers: 5
2020-04-09 17:12:29,461 - root - DEBUG - 501: Up Workers: 69, Busy Workers: 5
2020-04-09 17:12:34,531 - root - DEBUG - 506: Up Workers: 69, Busy Workers: 5
2020-04-09 17:12:39,583 - root - DEBUG - 511: Up Workers: 39, Busy Workers: 5
2020-04-09 17:12:44,632 - root - DEBUG - 516: Up Workers: 39, Busy Workers: 5
2020-04-09 17:12:49,679 - root - DEBUG - 521: Up Workers: 38, Busy Workers: 5
2020-04-09 17:12:54,723 - root - DEBUG - 526: Up Workers: 38, Busy Workers: 5
2020-04-09 17:12:59,773 - root - DEBUG - 531: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:04,823 - root - DEBUG - 536: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:09,866 - root - DEBUG - 541: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:14,918 - root - DEBUG - 546: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:19,964 - root - DEBUG - 551: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:25,010 - root - DEBUG - 556: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:30,066 - root - DEBUG - 561: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:35,121 - root - DEBUG - 566: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:40,175 - root - DEBUG - 571: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:45,222 - root - DEBUG - 576: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:50,273 - root - DEBUG - 581: Up Workers: 38, Busy Workers: 5
2020-04-09 17:13:55,330 - root - DEBUG - 587: Up Workers: 38, Busy Workers: 5
2020-04-09 17:14:00,385 - root - DEBUG - 592: Up Workers: 38, Busy Workers: 5
2020-04-09 17:14:05,433 - root - DEBUG - 597: Up Workers: 38, Busy Workers: 5
2020-04-09 17:14:10,483 - root - DEBUG - 602: Up Workers: 38, Busy Workers: 5
2020-04-09 17:14:15,526 - root - DEBUG - 607: Up Workers: 38, Busy Workers: 5
2020-04-09 17:14:15,534 - root - INFO - launching 32 new tasks....
2020-04-09 17:14:20,572 - root - DEBUG - 612: Up Workers: 70, Busy Workers: 6
2020-04-09 17:14:25,621 - root - DEBUG - 617: Up Workers: 70, Busy Workers: 6
2020-04-09 17:14:30,685 - root - DEBUG - 622: Up Workers: 70, Busy Workers: 6
2020-04-09 17:14:35,728 - root - DEBUG - 627: Up Workers: 70, Busy Workers: 6
2020-04-09 17:14:40,790 - root - DEBUG - 632: Up Workers: 39, Busy Workers: 6
2020-04-09 17:14:45,875 - root - DEBUG - 637: Up Workers: 39, Busy Workers: 6
2020-04-09 17:14:50,966 - root - DEBUG - 642: Up Workers: 39, Busy Workers: 6
2020-04-09 17:14:56,012 - root - DEBUG - 647: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:01,060 - root - DEBUG - 652: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:06,106 - root - DEBUG - 657: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:11,152 - root - DEBUG - 662: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:16,198 - root - DEBUG - 667: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:21,248 - root - DEBUG - 672: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:26,292 - root - DEBUG - 678: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:31,343 - root - DEBUG - 683: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:36,392 - root - DEBUG - 688: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:41,437 - root - DEBUG - 693: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:46,485 - root - DEBUG - 698: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:51,534 - root - DEBUG - 703: Up Workers: 39, Busy Workers: 6
2020-04-09 17:15:56,583 - root - DEBUG - 708: Up Workers: 39, Busy Workers: 6
2020-04-09 17:16:01,636 - root - DEBUG - 713: Up Workers: 39, Busy Workers: 6
2020-04-09 17:16:06,684 - root - DEBUG - 718: Up Workers: 39, Busy Workers: 6
2020-04-09 17:16:11,729 - root - DEBUG - 723: Up Workers: 39, Busy Workers: 6
2020-04-09 17:16:16,785 - root - DEBUG - 728: Up Workers: 39, Busy Workers: 7
2020-04-09 17:16:16,794 - root - INFO - launching 32 new tasks....
2020-04-09 17:16:21,836 - root - DEBUG - 733: Up Workers: 71, Busy Workers: 7
2020-04-09 17:16:26,886 - root - DEBUG - 738: Up Workers: 71, Busy Workers: 7
2020-04-09 17:16:31,934 - root - DEBUG - 743: Up Workers: 71, Busy Workers: 7
2020-04-09 17:16:36,989 - root - DEBUG - 748: Up Workers: 71, Busy Workers: 7
2020-04-09 17:16:42,037 - root - DEBUG - 753: Up Workers: 40, Busy Workers: 7
2020-04-09 17:16:47,084 - root - DEBUG - 758: Up Workers: 40, Busy Workers: 7
2020-04-09 17:16:52,130 - root - DEBUG - 763: Up Workers: 40, Busy Workers: 7
2020-04-09 17:16:57,178 - root - DEBUG - 768: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:02,224 - root - DEBUG - 773: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:07,269 - root - DEBUG - 778: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:12,362 - root - DEBUG - 784: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:17,410 - root - DEBUG - 789: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:22,457 - root - DEBUG - 794: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:27,503 - root - DEBUG - 799: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:32,553 - root - DEBUG - 804: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:37,601 - root - DEBUG - 809: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:42,837 - root - DEBUG - 814: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:47,885 - root - DEBUG - 819: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:52,935 - root - DEBUG - 824: Up Workers: 40, Busy Workers: 7
2020-04-09 17:17:57,984 - root - DEBUG - 829: Up Workers: 40, Busy Workers: 7
2020-04-09 17:18:03,030 - root - DEBUG - 834: Up Workers: 40, Busy Workers: 7
2020-04-09 17:18:08,076 - root - DEBUG - 839: Up Workers: 40, Busy Workers: 7
2020-04-09 17:18:13,126 - root - DEBUG - 844: Up Workers: 40, Busy Workers: 7
2020-04-09 17:18:18,176 - root - DEBUG - 849: Up Workers: 40, Busy Workers: 8
2020-04-09 17:18:18,185 - root - INFO - launching 32 new tasks....
2020-04-09 17:18:23,229 - root - DEBUG - 854: Up Workers: 72, Busy Workers: 8
2020-04-09 17:18:28,276 - root - DEBUG - 859: Up Workers: 72, Busy Workers: 8
2020-04-09 17:18:33,325 - root - DEBUG - 865: Up Workers: 72, Busy Workers: 8
2020-04-09 17:18:33,326 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:18:33,326 - root - INFO - 865: Up Workers: 72, Busy Workers: 8
2020-04-09 17:18:38,375 - root - DEBUG - 870: Up Workers: 72, Busy Workers: 8
2020-04-09 17:18:38,375 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:18:38,375 - root - INFO - 870: Up Workers: 72, Busy Workers: 8
2020-04-09 17:18:43,430 - root - DEBUG - 875: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:43,431 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:18:43,431 - root - INFO - 875: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:48,489 - root - DEBUG - 880: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:48,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:18:48,489 - root - INFO - 880: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:53,538 - root - DEBUG - 885: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:53,538 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:18:53,539 - root - INFO - 885: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:58,589 - root - DEBUG - 890: Up Workers: 41, Busy Workers: 8
2020-04-09 17:18:58,590 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:18:58,590 - root - INFO - 890: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:03,638 - root - DEBUG - 895: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:03,638 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:03,638 - root - INFO - 895: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:08,698 - root - DEBUG - 900: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:08,698 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:08,698 - root - INFO - 900: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:13,744 - root - DEBUG - 905: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:13,744 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:13,744 - root - INFO - 905: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:18,789 - root - DEBUG - 910: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:18,789 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:18,789 - root - INFO - 910: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:23,838 - root - DEBUG - 915: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:23,838 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:23,838 - root - INFO - 915: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:28,883 - root - DEBUG - 920: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:28,884 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:28,884 - root - INFO - 920: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:33,932 - root - DEBUG - 925: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:33,932 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:33,932 - root - INFO - 925: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:38,984 - root - DEBUG - 930: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:38,984 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:38,984 - root - INFO - 930: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:44,031 - root - DEBUG - 935: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:44,031 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:44,032 - root - INFO - 935: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:49,081 - root - DEBUG - 940: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:49,081 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:49,081 - root - INFO - 940: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:54,124 - root - DEBUG - 945: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:54,124 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:54,124 - root - INFO - 945: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:59,171 - root - DEBUG - 950: Up Workers: 41, Busy Workers: 8
2020-04-09 17:19:59,171 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:19:59,172 - root - INFO - 950: Up Workers: 41, Busy Workers: 8
2020-04-09 17:20:04,222 - root - DEBUG - 955: Up Workers: 41, Busy Workers: 8
2020-04-09 17:20:04,222 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:20:04,222 - root - INFO - 955: Up Workers: 41, Busy Workers: 8
2020-04-09 17:20:09,269 - root - DEBUG - 960: Up Workers: 41, Busy Workers: 8
2020-04-09 17:20:09,270 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-09 17:20:09,270 - root - INFO - 960: Up Workers: 41, Busy Workers: 8
2020-04-09 17:20:14,317 - root - DEBUG - 966: Up Workers: 41, Busy Workers: 8
2020-04-09 17:20:19,366 - root - DEBUG - 971: Up Workers: 41, Busy Workers: 9
2020-04-09 17:20:19,374 - root - INFO - launching 32 new tasks....
2020-04-09 17:20:24,418 - root - DEBUG - 976: Up Workers: 73, Busy Workers: 9
2020-04-09 17:20:29,466 - root - DEBUG - 981: Up Workers: 73, Busy Workers: 9
2020-04-09 17:20:34,513 - root - DEBUG - 986: Up Workers: 73, Busy Workers: 9
2020-04-09 17:20:39,563 - root - DEBUG - 991: Up Workers: 73, Busy Workers: 9
2020-04-09 17:20:44,611 - root - DEBUG - 996: Up Workers: 42, Busy Workers: 9
2020-04-09 17:20:49,715 - root - DEBUG - 1001: Up Workers: 42, Busy Workers: 9
2020-04-09 17:20:54,762 - root - DEBUG - 1006: Up Workers: 42, Busy Workers: 9
2020-04-09 17:20:59,808 - root - DEBUG - 1011: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:04,880 - root - DEBUG - 1016: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:09,925 - root - DEBUG - 1021: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:14,974 - root - DEBUG - 1026: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:20,024 - root - DEBUG - 1031: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:25,083 - root - DEBUG - 1036: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:30,131 - root - DEBUG - 1041: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:35,186 - root - DEBUG - 1046: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:40,233 - root - DEBUG - 1051: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:45,286 - root - DEBUG - 1057: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:50,333 - root - DEBUG - 1062: Up Workers: 42, Busy Workers: 9
2020-04-09 17:21:55,394 - root - DEBUG - 1067: Up Workers: 42, Busy Workers: 9
2020-04-09 17:22:00,439 - root - DEBUG - 1072: Up Workers: 42, Busy Workers: 9
2020-04-09 17:22:05,544 - root - DEBUG - 1077: Up Workers: 42, Busy Workers: 9
2020-04-09 17:22:10,591 - root - DEBUG - 1082: Up Workers: 42, Busy Workers: 9
2020-04-09 17:22:15,640 - root - DEBUG - 1087: Up Workers: 42, Busy Workers: 9
2020-04-09 17:22:20,691 - root - DEBUG - 1092: Up Workers: 42, Busy Workers: 10
2020-04-09 17:22:20,700 - root - INFO - launching 32 new tasks....
2020-04-09 17:22:25,743 - root - DEBUG - 1097: Up Workers: 74, Busy Workers: 10
2020-04-09 17:22:30,793 - root - DEBUG - 1102: Up Workers: 74, Busy Workers: 10
2020-04-09 17:22:35,841 - root - DEBUG - 1107: Up Workers: 74, Busy Workers: 10
2020-04-09 17:22:40,885 - root - DEBUG - 1112: Up Workers: 74, Busy Workers: 10
2020-04-09 17:22:45,935 - root - DEBUG - 1117: Up Workers: 43, Busy Workers: 10
2020-04-09 17:22:50,990 - root - DEBUG - 1122: Up Workers: 43, Busy Workers: 10
2020-04-09 17:22:56,039 - root - DEBUG - 1127: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:01,086 - root - DEBUG - 1132: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:06,138 - root - DEBUG - 1137: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:11,191 - root - DEBUG - 1142: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:16,247 - root - DEBUG - 1147: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:21,298 - root - DEBUG - 1153: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:26,348 - root - DEBUG - 1158: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:31,406 - root - DEBUG - 1163: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:36,461 - root - DEBUG - 1168: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:41,566 - root - DEBUG - 1173: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:46,615 - root - DEBUG - 1178: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:51,660 - root - DEBUG - 1183: Up Workers: 43, Busy Workers: 10
2020-04-09 17:23:56,713 - root - DEBUG - 1188: Up Workers: 43, Busy Workers: 10
2020-04-09 17:24:01,769 - root - DEBUG - 1193: Up Workers: 43, Busy Workers: 10
2020-04-09 17:24:06,816 - root - DEBUG - 1198: Up Workers: 43, Busy Workers: 10
2020-04-09 17:24:11,865 - root - DEBUG - 1203: Up Workers: 43, Busy Workers: 10
2020-04-09 17:24:16,912 - root - DEBUG - 1208: Up Workers: 43, Busy Workers: 11
2020-04-09 17:24:21,959 - root - DEBUG - 1213: Up Workers: 43, Busy Workers: 11
2020-04-09 17:24:21,967 - root - INFO - launching 32 new tasks....
2020-04-09 17:24:27,009 - root - DEBUG - 1218: Up Workers: 75, Busy Workers: 11
2020-04-09 17:24:32,063 - root - DEBUG - 1223: Up Workers: 75, Busy Workers: 11
2020-04-09 17:24:37,107 - root - DEBUG - 1228: Up Workers: 75, Busy Workers: 11
2020-04-09 17:24:42,153 - root - DEBUG - 1233: Up Workers: 75, Busy Workers: 11
2020-04-09 17:24:47,197 - root - DEBUG - 1238: Up Workers: 44, Busy Workers: 11
2020-04-09 17:24:52,243 - root - DEBUG - 1243: Up Workers: 44, Busy Workers: 11
2020-04-09 17:24:57,293 - root - DEBUG - 1249: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:02,345 - root - DEBUG - 1254: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:07,408 - root - DEBUG - 1259: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:12,458 - root - DEBUG - 1264: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:17,507 - root - DEBUG - 1269: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:22,556 - root - DEBUG - 1274: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:27,604 - root - DEBUG - 1279: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:32,657 - root - DEBUG - 1284: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:37,705 - root - DEBUG - 1289: Up Workers: 44, Busy Workers: 11
2020-04-09 17:25:42,755 - root - DEBUG - 1294: Up Workers: 44, Busy Workers: 11
2020-04-11 15:30:49,530 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 15:30:55,990 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:30:55,992 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f075b312a60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f075b312d08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f075b312950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f075b312a60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f075b312d08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f075b312950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:30:55,993 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f075b312a60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f075b312d08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f075b312950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f075b312a60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f075b312d08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f075b312950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:30:56,722 - root - INFO - Starting with 32 cores
2020-04-11 15:31:02,212 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 15:31:02,212 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 15:31:02,212 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 15:31:07,306 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 15:31:07,306 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 15:31:07,306 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 15:59:09,408 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 15:59:15,913 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:59:15,914 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:59:15,916 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:59:16,424 - root - INFO - Starting with 32 cores
2020-04-11 15:59:22,001 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 15:59:22,001 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 15:59:22,001 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 15:59:27,056 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 15:59:27,056 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 15:59:27,056 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 15:59:32,106 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 15:59:32,106 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:59:32,107 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 15:59:32,577 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 15:59:32,577 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 15:59:39,133 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:59:39,133 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:59:39,135 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:59:39,135 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:59:39,136 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:59:39,136 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:59:39,679 - root - INFO - Starting with 32 cores
2020-04-11 15:59:39,679 - root - INFO - Starting with 32 cores
2020-04-11 15:59:45,153 - root - DEBUG - 5: Up Workers: 31, Busy Workers: 3
2020-04-11 15:59:45,153 - root - DEBUG - 5: Up Workers: 31, Busy Workers: 3
2020-04-11 15:59:45,153 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 15:59:45,153 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 15:59:45,153 - root - INFO - 5: Up Workers: 31, Busy Workers: 3
2020-04-11 15:59:45,153 - root - INFO - 5: Up Workers: 31, Busy Workers: 3
2020-04-11 15:59:50,203 - root - DEBUG - 10: Up Workers: 31, Busy Workers: 0
2020-04-11 15:59:50,203 - root - DEBUG - 10: Up Workers: 31, Busy Workers: 0
2020-04-11 15:59:50,203 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:59:50,203 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:59:50,203 - root - INFO - 10: Up Workers: 31, Busy Workers: 0
2020-04-11 15:59:50,203 - root - INFO - 10: Up Workers: 31, Busy Workers: 0
2020-04-11 15:59:58,533 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 15:59:58,533 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 15:59:58,533 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:04,935 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:04,935 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:04,935 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:04,936 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:04,936 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:04,936 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:04,937 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:04,937 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:04,937 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:05,584 - root - INFO - Starting with 32 cores
2020-04-11 16:00:05,584 - root - INFO - Starting with 32 cores
2020-04-11 16:00:05,584 - root - INFO - Starting with 32 cores
2020-04-11 16:00:11,071 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:11,071 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:11,071 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:11,071 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:11,071 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:11,071 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:11,071 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:11,071 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:11,071 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:16,142 - root - DEBUG - 10: Up Workers: 29, Busy Workers: 0
2020-04-11 16:00:16,142 - root - DEBUG - 10: Up Workers: 29, Busy Workers: 0
2020-04-11 16:00:16,142 - root - DEBUG - 10: Up Workers: 29, Busy Workers: 0
2020-04-11 16:00:16,142 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:00:16,142 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:00:16,142 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:00:16,142 - root - INFO - 10: Up Workers: 29, Busy Workers: 0
2020-04-11 16:00:16,142 - root - INFO - 10: Up Workers: 29, Busy Workers: 0
2020-04-11 16:00:16,142 - root - INFO - 10: Up Workers: 29, Busy Workers: 0
2020-04-11 16:00:20,466 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:20,466 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:20,466 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:20,466 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:27,015 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:27,015 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:27,015 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:27,015 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:27,016 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:27,016 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:27,016 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:27,016 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:27,018 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:27,018 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:27,018 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:27,018 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:27,420 - root - INFO - Starting with 32 cores
2020-04-11 16:00:27,420 - root - INFO - Starting with 32 cores
2020-04-11 16:00:27,420 - root - INFO - Starting with 32 cores
2020-04-11 16:00:27,420 - root - INFO - Starting with 32 cores
2020-04-11 16:00:32,899 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:32,899 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:32,899 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:32,899 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:32,899 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:32,899 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:37,949 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,949 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,949 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,949 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,950 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:37,950 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:37,950 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:37,950 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:37,950 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,950 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,950 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:37,950 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:00:42,994 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:42,994 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:42,994 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:42,994 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:00:42,994 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:42,994 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:00:43,348 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:43,348 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:43,348 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:43,348 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:43,348 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:00:49,751 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:49,751 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:49,751 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:49,751 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:49,751 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:00:49,753 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:49,753 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:49,753 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:49,753 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:49,753 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:00:49,754 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:49,754 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:49,754 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:49,754 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:49,754 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:00:50,668 - root - INFO - Starting with 32 cores
2020-04-11 16:00:50,668 - root - INFO - Starting with 32 cores
2020-04-11 16:00:50,668 - root - INFO - Starting with 32 cores
2020-04-11 16:00:50,668 - root - INFO - Starting with 32 cores
2020-04-11 16:00:50,668 - root - INFO - Starting with 32 cores
2020-04-11 16:00:56,253 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:56,253 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:56,253 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:56,253 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:56,253 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:00:56,253 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:00:56,253 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:01:01,307 - root - DEBUG - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - DEBUG - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - DEBUG - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - DEBUG - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - DEBUG - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:01,307 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:01,307 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:01,307 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:01,307 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:01,307 - root - INFO - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - INFO - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - INFO - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - INFO - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:01,307 - root - INFO - 10: Up Workers: 1, Busy Workers: 0
2020-04-11 16:01:05,628 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:05,628 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:05,628 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:05,628 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:05,628 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:05,628 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:12,036 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:12,036 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:12,036 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:12,036 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:12,036 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:12,036 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:12,037 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:12,037 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:12,037 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:12,037 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:12,037 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:12,037 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:12,039 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:12,039 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:12,039 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:12,039 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:12,039 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:12,039 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:13,024 - root - INFO - Starting with 32 cores
2020-04-11 16:01:13,024 - root - INFO - Starting with 32 cores
2020-04-11 16:01:13,024 - root - INFO - Starting with 32 cores
2020-04-11 16:01:13,024 - root - INFO - Starting with 32 cores
2020-04-11 16:01:13,024 - root - INFO - Starting with 32 cores
2020-04-11 16:01:13,024 - root - INFO - Starting with 32 cores
2020-04-11 16:01:18,489 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,489 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,489 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,489 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,489 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,489 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:18,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:18,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:18,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:18,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:18,489 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:18,490 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,490 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,490 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,490 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,490 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:18,490 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:23,605 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:23,605 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:23,605 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:23,605 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:23,605 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:23,605 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:23,605 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:27,982 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,546 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,548 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,549 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:34,993 - root - INFO - Starting with 32 cores
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,478 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:40,479 - root - INFO - 5: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:45,529 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,598 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,599 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:50,948 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,382 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,384 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,385 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:01:57,879 - root - INFO - Starting with 32 cores
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,351 - root - INFO - Waiting: 1, Currently Processing: 3
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:03,352 - root - INFO - 5: Up Workers: 32, Busy Workers: 4
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - DEBUG - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:08,433 - root - INFO - 10: Up Workers: 12, Busy Workers: 0
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:12,803 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,214 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,215 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,217 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:19,818 - root - INFO - Starting with 32 cores
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:25,335 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - DEBUG - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,387 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,388 - root - INFO - 10: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:30,703 - root - INFO - Logging to 6136ac48ce90544d9a7290e0b3f7fd5d.log
2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,170 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,171 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,173 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f491c15ea60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f491c15ed08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f491c15e950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:37,576 - root - INFO - Starting with 32 cores
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:43,086 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,133 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:48,134 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,181 - root - DEBUG - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
2020-04-11 16:02:53,182 - root - INFO - 15: Up Workers: 0, Busy Workers: 0
