2020-04-04 00:46:36,665 - root - INFO - [2020-04-04 00:46:36.665961] Logging to c01029e514b7e01eb1cb54949ceb302f.log.
2020-04-04 00:47:13,732 - root - INFO - [2020-04-04 00:47:13.732816] Logging to c01029e514b7e01eb1cb54949ceb302f.log.
2020-04-04 00:48:50,249 - root - INFO - [2020-04-04 00:48:50.249545] Logging to c01029e514b7e01eb1cb54949ceb302f.log.
2020-04-04 00:49:12,411 - root - DEBUG - Python AST:
FunctionDef(name='GEMM',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='B', annotation=Name(id='BigMatrix')),
            arg(arg='M', annotation=Name(id='int')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='K', annotation=Name(id='int')),
            arg(arg='Temp', annotation=Name(id='BigMatrix')),
            arg(arg='Out', annotation=Name(id='BigMatrix'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(targets=[Name(id='tree_depth')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='K')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=4)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='K')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='Temp'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k'), Num(n=0)])))],
                                    value=Call(func=Name(id='gemm'),
                                        args=[
                                            Subscript(value=Name(id='A'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='k')]))),
                                            Subscript(value=Name(id='B'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='j')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='level'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='tree_depth')], keywords=[]),
                            body=[
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[Num(n=0),
                                            Name(id='K'),
                                            BinOp(left=Num(n=4),
                                                op=Pow,
                                                right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(value=Name(id='Temp'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Name(id='i'),
                                                                Name(id='j'),
                                                                Name(id='k'),
                                                                BinOp(left=Name(id='level'), op=Add, right=Num(n=1))])))],
                                            value=Call(func=Name(id='add_matrices'),
                                                args=[
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    Name(id='k'),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=4),
                                                                            op=Pow,
                                                                            right=Name(id='level'))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=3),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='Out'),
                                    slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j')])))],
                            value=Call(func=Name(id='identity'),
                                args=[
                                    Subscript(value=Name(id='Temp'),
                                        slice=Index(
                                            value=Tuple(elts=[Name(id='i'), Name(id='j'), Num(n=0), Name(id='tree_depth')],
                                                )))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-04 00:49:12,413 - root - DEBUG - IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(lhs=Ref(name='tree_depth', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='K', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=4, type=None), type=None),
                    type=None),
                type=None)),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='K', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7ff56ed7b730>,
                                    output=IndexExpr(matrix_name='Temp',
                                        indices=[Ref(name='i', type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None),
                                            IntConst(val=0, type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=None), Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=None), Ref(name='j', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='tree_depth', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=None),
                                    max=Ref(name='K', type=None),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=None),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7ff56ed7b048>,
                                            output=IndexExpr(matrix_name='Temp',
                                                indices=[Ref(name='i', type=None),
                                                    Ref(name='j', type=None),
                                                    Ref(name='k', type=None),
                                                    BinOp(op='Add',
                                                        left=Ref(name='level', type=None),
                                                        right=IntConst(val=1, type=None),
                                                        type=None)]),
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4, type=None),
                                                                right=Ref(name='level', type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7ff56ed7bc80>,
                            output=IndexExpr(matrix_name='Out',
                                indices=[Ref(name='i', type=None), Ref(name='j', type=None)]),
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='tree_depth', type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>,
        <class 'int'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>])

2020-04-04 00:49:12,414 - root - DEBUG - typed IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(
            lhs=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7ff56ed7b730>,
                                    output=[
                                        IndexExpr(matrix_name='Temp',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                    max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.IntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7ff56ed7b048>,
                                            output=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=Ref(name='level',
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7ff56ed7bc80>,
                            output=[
                                IndexExpr(matrix_name='Out',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>])

2020-04-04 00:49:19,553 - root - INFO - [2020-04-04 00:49:19.553307] Starting with 32 cores
2020-04-04 00:49:25,030 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 31
2020-04-04 00:49:25,030 - root - INFO - Waiting: 2164, Currently Processing: 31
2020-04-04 00:49:25,030 - root - INFO - 5: Up Workers: 32, Busy Workers: 31
2020-04-04 00:49:30,124 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:30,125 - root - INFO - Waiting: 2118, Currently Processing: 32
2020-04-04 00:49:30,125 - root - INFO - 10: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:35,179 - root - DEBUG - 15: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:35,179 - root - INFO - Waiting: 2075, Currently Processing: 32
2020-04-04 00:49:35,179 - root - INFO - 15: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:40,274 - root - DEBUG - 20: Up Workers: 32, Busy Workers: 31
2020-04-04 00:49:40,274 - root - INFO - Waiting: 2038, Currently Processing: 31
2020-04-04 00:49:40,274 - root - INFO - 20: Up Workers: 32, Busy Workers: 31
2020-04-04 00:49:45,364 - root - DEBUG - 25: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:45,364 - root - INFO - Waiting: 2038, Currently Processing: 31
2020-04-04 00:49:45,364 - root - INFO - 25: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:50,448 - root - DEBUG - 30: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:50,448 - root - INFO - Waiting: 1964, Currently Processing: 32
2020-04-04 00:49:50,449 - root - INFO - 30: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:55,547 - root - DEBUG - 35: Up Workers: 32, Busy Workers: 32
2020-04-04 00:49:55,547 - root - INFO - Waiting: 1933, Currently Processing: 32
2020-04-04 00:49:55,547 - root - INFO - 35: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:00,649 - root - DEBUG - 40: Up Workers: 32, Busy Workers: 31
2020-04-04 00:50:00,649 - root - INFO - Waiting: 1896, Currently Processing: 31
2020-04-04 00:50:00,650 - root - INFO - 40: Up Workers: 32, Busy Workers: 31
2020-04-04 00:50:05,732 - root - DEBUG - 45: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:05,732 - root - INFO - Waiting: 1862, Currently Processing: 32
2020-04-04 00:50:05,732 - root - INFO - 45: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:10,846 - root - DEBUG - 50: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:10,846 - root - INFO - Waiting: 1822, Currently Processing: 32
2020-04-04 00:50:10,846 - root - INFO - 50: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:15,921 - root - DEBUG - 55: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:15,921 - root - INFO - Waiting: 1822, Currently Processing: 32
2020-04-04 00:50:15,921 - root - INFO - 55: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:21,028 - root - DEBUG - 60: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:21,029 - root - INFO - Waiting: 1751, Currently Processing: 32
2020-04-04 00:50:21,029 - root - INFO - 60: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:26,108 - root - DEBUG - 66: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:31,199 - root - DEBUG - 71: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:36,286 - root - DEBUG - 76: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:41,365 - root - DEBUG - 81: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:46,463 - root - DEBUG - 86: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:51,542 - root - DEBUG - 91: Up Workers: 32, Busy Workers: 32
2020-04-04 00:50:56,618 - root - DEBUG - 96: Up Workers: 32, Busy Workers: 31
2020-04-04 00:51:01,728 - root - DEBUG - 101: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:06,804 - root - DEBUG - 106: Up Workers: 32, Busy Workers: 31
2020-04-04 00:51:11,894 - root - DEBUG - 111: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:16,976 - root - DEBUG - 116: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:22,059 - root - DEBUG - 122: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:27,141 - root - DEBUG - 127: Up Workers: 32, Busy Workers: 31
2020-04-04 00:51:32,198 - root - DEBUG - 132: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:37,253 - root - DEBUG - 137: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:42,308 - root - DEBUG - 142: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:47,359 - root - DEBUG - 147: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:52,415 - root - DEBUG - 152: Up Workers: 32, Busy Workers: 32
2020-04-04 00:51:57,469 - root - DEBUG - 157: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:02,522 - root - DEBUG - 162: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:07,583 - root - DEBUG - 167: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:12,639 - root - DEBUG - 172: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:17,698 - root - DEBUG - 177: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:22,766 - root - DEBUG - 182: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:27,842 - root - DEBUG - 187: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:32,923 - root - DEBUG - 192: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:37,985 - root - DEBUG - 197: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:43,069 - root - DEBUG - 203: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:48,122 - root - DEBUG - 208: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:53,181 - root - DEBUG - 213: Up Workers: 32, Busy Workers: 32
2020-04-04 00:52:58,237 - root - DEBUG - 218: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:03,296 - root - DEBUG - 223: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:08,356 - root - DEBUG - 228: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:13,417 - root - DEBUG - 233: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:18,485 - root - DEBUG - 238: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:23,543 - root - DEBUG - 243: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:28,611 - root - DEBUG - 248: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:33,684 - root - DEBUG - 253: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:38,755 - root - DEBUG - 258: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:43,811 - root - DEBUG - 263: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:48,876 - root - DEBUG - 268: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:53,933 - root - DEBUG - 273: Up Workers: 32, Busy Workers: 32
2020-04-04 00:53:58,984 - root - DEBUG - 278: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:04,035 - root - DEBUG - 284: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:09,089 - root - DEBUG - 289: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:14,143 - root - DEBUG - 294: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:19,196 - root - DEBUG - 299: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:24,259 - root - DEBUG - 304: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:29,313 - root - DEBUG - 309: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:34,367 - root - DEBUG - 314: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:39,424 - root - DEBUG - 319: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:44,485 - root - DEBUG - 324: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:49,537 - root - DEBUG - 329: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:54,593 - root - DEBUG - 334: Up Workers: 32, Busy Workers: 32
2020-04-04 00:54:59,664 - root - DEBUG - 339: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:04,722 - root - DEBUG - 344: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:09,787 - root - DEBUG - 349: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:14,841 - root - DEBUG - 354: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:19,894 - root - DEBUG - 359: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:24,946 - root - DEBUG - 364: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:30,053 - root - DEBUG - 369: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:35,107 - root - DEBUG - 375: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:35,107 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:55:35,108 - root - INFO - 375: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:40,162 - root - DEBUG - 380: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:40,163 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:55:40,163 - root - INFO - 380: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:45,217 - root - DEBUG - 385: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:45,218 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:55:45,218 - root - INFO - 385: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:50,271 - root - DEBUG - 390: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:50,271 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:55:50,271 - root - INFO - 390: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:55,327 - root - DEBUG - 395: Up Workers: 32, Busy Workers: 32
2020-04-04 00:55:55,327 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:55:55,327 - root - INFO - 395: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:00,386 - root - DEBUG - 400: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:00,386 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:00,386 - root - INFO - 400: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:05,439 - root - DEBUG - 405: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:05,439 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:05,439 - root - INFO - 405: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:10,489 - root - DEBUG - 410: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:10,490 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:10,490 - root - INFO - 410: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:15,543 - root - DEBUG - 415: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:15,543 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:15,543 - root - INFO - 415: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:20,597 - root - DEBUG - 420: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:20,597 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:20,597 - root - INFO - 420: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:25,652 - root - DEBUG - 425: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:25,652 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:25,652 - root - INFO - 425: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:30,727 - root - DEBUG - 430: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:30,727 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:30,727 - root - INFO - 430: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:35,787 - root - DEBUG - 435: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:35,787 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:35,787 - root - INFO - 435: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:40,842 - root - DEBUG - 440: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:40,842 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:40,842 - root - INFO - 440: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:45,905 - root - DEBUG - 445: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:45,905 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:45,905 - root - INFO - 445: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:50,963 - root - DEBUG - 450: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:50,964 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 00:56:50,964 - root - INFO - 450: Up Workers: 32, Busy Workers: 32
2020-04-04 00:56:56,018 - root - DEBUG - 456: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:01,075 - root - DEBUG - 461: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:06,150 - root - DEBUG - 466: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:11,221 - root - DEBUG - 471: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:16,275 - root - DEBUG - 476: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:21,328 - root - DEBUG - 481: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:26,381 - root - DEBUG - 486: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:31,473 - root - DEBUG - 491: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:36,527 - root - DEBUG - 496: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:41,590 - root - DEBUG - 501: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:46,644 - root - DEBUG - 506: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:51,701 - root - DEBUG - 511: Up Workers: 32, Busy Workers: 32
2020-04-04 00:57:56,753 - root - DEBUG - 516: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:01,807 - root - DEBUG - 521: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:06,859 - root - DEBUG - 526: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:11,951 - root - DEBUG - 531: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:17,015 - root - DEBUG - 536: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:22,071 - root - DEBUG - 542: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:27,139 - root - DEBUG - 547: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:32,191 - root - DEBUG - 552: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:37,249 - root - DEBUG - 557: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:42,303 - root - DEBUG - 562: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:47,361 - root - DEBUG - 567: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:52,418 - root - DEBUG - 572: Up Workers: 32, Busy Workers: 32
2020-04-04 00:58:57,472 - root - DEBUG - 577: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:02,531 - root - DEBUG - 582: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:07,588 - root - DEBUG - 587: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:12,645 - root - DEBUG - 592: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:17,708 - root - DEBUG - 597: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:22,767 - root - DEBUG - 602: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:27,830 - root - DEBUG - 607: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:32,891 - root - DEBUG - 612: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:37,949 - root - DEBUG - 617: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:43,006 - root - DEBUG - 622: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:48,063 - root - DEBUG - 628: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:53,175 - root - DEBUG - 633: Up Workers: 32, Busy Workers: 32
2020-04-04 00:59:58,231 - root - DEBUG - 638: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:03,286 - root - DEBUG - 643: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:08,346 - root - DEBUG - 648: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:13,420 - root - DEBUG - 653: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:18,478 - root - DEBUG - 658: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:23,533 - root - DEBUG - 663: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:28,605 - root - DEBUG - 668: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:33,666 - root - DEBUG - 673: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:38,843 - root - DEBUG - 678: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:43,902 - root - DEBUG - 683: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:48,961 - root - DEBUG - 688: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:54,019 - root - DEBUG - 694: Up Workers: 32, Busy Workers: 32
2020-04-04 01:00:59,074 - root - DEBUG - 699: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:04,129 - root - DEBUG - 704: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:09,182 - root - DEBUG - 709: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:14,235 - root - DEBUG - 714: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:19,298 - root - DEBUG - 719: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:24,348 - root - DEBUG - 724: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:29,401 - root - DEBUG - 729: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:34,455 - root - DEBUG - 734: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:39,686 - root - DEBUG - 739: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:44,741 - root - DEBUG - 744: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:49,797 - root - DEBUG - 749: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:54,876 - root - DEBUG - 754: Up Workers: 32, Busy Workers: 32
2020-04-04 01:01:59,934 - root - DEBUG - 759: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:04,989 - root - DEBUG - 764: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:10,043 - root - DEBUG - 770: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:10,043 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:10,043 - root - INFO - 770: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:15,146 - root - DEBUG - 775: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:15,146 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:15,146 - root - INFO - 775: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:20,199 - root - DEBUG - 780: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:20,199 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:20,199 - root - INFO - 780: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:25,252 - root - DEBUG - 785: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:25,252 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:25,252 - root - INFO - 785: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:30,316 - root - DEBUG - 790: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:30,316 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:30,316 - root - INFO - 790: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:35,372 - root - DEBUG - 795: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:35,372 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:35,372 - root - INFO - 795: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:40,428 - root - DEBUG - 800: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:40,428 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:40,428 - root - INFO - 800: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:45,481 - root - DEBUG - 805: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:45,482 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:45,482 - root - INFO - 805: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:50,534 - root - DEBUG - 810: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:50,534 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:50,534 - root - INFO - 810: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:55,588 - root - DEBUG - 815: Up Workers: 32, Busy Workers: 32
2020-04-04 01:02:55,588 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:02:55,588 - root - INFO - 815: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:00,664 - root - DEBUG - 820: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:00,664 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:03:00,664 - root - INFO - 820: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:05,720 - root - DEBUG - 825: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:05,720 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:03:05,720 - root - INFO - 825: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:10,781 - root - DEBUG - 830: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:10,781 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:03:10,781 - root - INFO - 830: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:16,842 - root - DEBUG - 835: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:16,842 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:03:16,842 - root - INFO - 835: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:21,896 - root - DEBUG - 841: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:26,951 - root - DEBUG - 846: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:32,007 - root - DEBUG - 851: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:37,069 - root - DEBUG - 857: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:42,123 - root - DEBUG - 862: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:47,178 - root - DEBUG - 867: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:52,236 - root - DEBUG - 872: Up Workers: 32, Busy Workers: 32
2020-04-04 01:03:57,289 - root - DEBUG - 877: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:02,341 - root - DEBUG - 882: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:07,409 - root - DEBUG - 887: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:12,468 - root - DEBUG - 892: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:17,521 - root - DEBUG - 897: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:22,608 - root - DEBUG - 902: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:27,662 - root - DEBUG - 907: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:32,719 - root - DEBUG - 912: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:37,971 - root - DEBUG - 917: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:43,029 - root - DEBUG - 923: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:48,083 - root - DEBUG - 928: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:53,138 - root - DEBUG - 933: Up Workers: 32, Busy Workers: 32
2020-04-04 01:04:58,193 - root - DEBUG - 938: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:03,249 - root - DEBUG - 943: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:08,309 - root - DEBUG - 948: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:13,370 - root - DEBUG - 953: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:18,423 - root - DEBUG - 958: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:23,489 - root - DEBUG - 963: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:28,542 - root - DEBUG - 968: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:33,598 - root - DEBUG - 973: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:38,651 - root - DEBUG - 978: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:43,707 - root - DEBUG - 983: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:48,763 - root - DEBUG - 988: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:53,813 - root - DEBUG - 993: Up Workers: 32, Busy Workers: 32
2020-04-04 01:05:58,863 - root - DEBUG - 998: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:03,944 - root - DEBUG - 1003: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:08,999 - root - DEBUG - 1008: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:14,053 - root - DEBUG - 1014: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:19,115 - root - DEBUG - 1019: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:24,169 - root - DEBUG - 1024: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:29,239 - root - DEBUG - 1029: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:34,291 - root - DEBUG - 1034: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:39,346 - root - DEBUG - 1039: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:44,396 - root - DEBUG - 1044: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:49,458 - root - DEBUG - 1049: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:54,514 - root - DEBUG - 1054: Up Workers: 32, Busy Workers: 32
2020-04-04 01:06:59,568 - root - DEBUG - 1059: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:04,628 - root - DEBUG - 1064: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:09,680 - root - DEBUG - 1069: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:14,736 - root - DEBUG - 1074: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:19,800 - root - DEBUG - 1079: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:24,863 - root - DEBUG - 1084: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:29,923 - root - DEBUG - 1089: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:34,977 - root - DEBUG - 1094: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:40,029 - root - DEBUG - 1100: Up Workers: 32, Busy Workers: 32
2020-04-04 01:07:40,029 - root - INFO - Waiting: 1330, Currently Processing: 0
2020-04-04 01:07:40,029 - root - INFO - 1100: Up Workers: 32, Busy Workers: 32
