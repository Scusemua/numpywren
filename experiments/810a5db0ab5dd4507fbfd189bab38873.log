2020-04-09 16:42:34,513 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 16:42:40,714 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 16:42:40,715 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fafd0866400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fafd0866400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 16:42:40,716 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fafd0866400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fafd0866400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 16:42:41,414 - root - INFO - Starting with 32 cores
2020-04-09 16:42:46,462 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 16:42:46,462 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-09 16:42:46,462 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 16:44:51,930 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 16:44:52,648 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 16:44:52,649 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f5f3701e400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f5f3701e400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 16:44:52,651 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f5f3701e400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f5f3701e400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 16:44:53,375 - root - INFO - Starting with 32 cores
2020-04-09 16:44:58,420 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 16:44:58,420 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-09 16:44:58,421 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 16:46:55,667 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 16:46:56,383 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 16:46:56,384 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb422a77400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb422a77400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 16:46:56,385 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fb422a77400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fb422a77400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 16:46:56,963 - root - INFO - Starting with 32 cores
2020-04-09 16:47:28,425 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 16:47:29,169 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 16:47:29,170 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f40169dd400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f40169dd400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 16:47:29,172 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f40169dd400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f40169dd400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 16:47:29,726 - root - INFO - Starting with 32 cores
2020-04-09 16:47:34,769 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 16:47:34,770 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-09 16:47:34,770 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 17:01:13,811 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 17:01:14,537 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 17:01:14,538 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fa33fc4f400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fa33fc4f400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 17:01:14,539 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fa33fc4f400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fa33fc4f400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 17:01:16,038 - root - INFO - Starting with 32 cores
2020-04-09 17:01:21,085 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 17:01:21,085 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-09 17:01:21,085 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 17:51:58,615 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 17:52:04,815 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 17:52:04,816 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc118147400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc118147400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 17:52:04,816 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc118147400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc118147400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 17:52:05,601 - root - INFO - Starting with 32 cores
2020-04-09 17:52:10,650 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 17:52:10,651 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-09 17:52:10,651 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 18:29:59,606 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-09 18:30:05,980 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-09 18:30:05,981 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc0f6c06400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc0f6c06400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-09 18:30:05,982 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc0f6c06400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc0f6c06400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-09 18:30:06,549 - root - INFO - Starting with 32 cores
2020-04-09 18:30:11,598 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 18:30:11,599 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-09 18:30:11,599 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-09 18:43:09,233 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-10 17:23:31,826 - root - INFO - [2020-04-10 17:23:31.826179] Logging to 810a5db0ab5dd4507fbfd189bab38873.log.
2020-04-10 17:25:33,256 - root - INFO - [2020-04-10 17:25:33.256352] Logging to 810a5db0ab5dd4507fbfd189bab38873.log.
2020-04-10 17:25:54,909 - root - DEBUG - Python AST:
FunctionDef(name='GEMM',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='B', annotation=Name(id='BigMatrix')),
            arg(arg='M', annotation=Name(id='int')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='K', annotation=Name(id='int')),
            arg(arg='Temp', annotation=Name(id='BigMatrix')),
            arg(arg='Out', annotation=Name(id='BigMatrix'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(targets=[Name(id='tree_depth')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='K')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=4)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='K')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='Temp'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k'), Num(n=0)])))],
                                    value=Call(func=Name(id='gemm'),
                                        args=[
                                            Subscript(value=Name(id='A'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='k')]))),
                                            Subscript(value=Name(id='B'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='j')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='level'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='tree_depth')], keywords=[]),
                            body=[
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[Num(n=0),
                                            Name(id='K'),
                                            BinOp(left=Num(n=4),
                                                op=Pow,
                                                right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(value=Name(id='Temp'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Name(id='i'),
                                                                Name(id='j'),
                                                                Name(id='k'),
                                                                BinOp(left=Name(id='level'), op=Add, right=Num(n=1))])))],
                                            value=Call(func=Name(id='add_matrices'),
                                                args=[
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    Name(id='k'),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=4),
                                                                            op=Pow,
                                                                            right=Name(id='level'))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=3),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='Out'),
                                    slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j')])))],
                            value=Call(func=Name(id='identity'),
                                args=[
                                    Subscript(value=Name(id='Temp'),
                                        slice=Index(
                                            value=Tuple(elts=[Name(id='i'), Name(id='j'), Num(n=0), Name(id='tree_depth')],
                                                )))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 17:25:54,910 - root - DEBUG - IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(lhs=Ref(name='tree_depth', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='K', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=4, type=None), type=None),
                    type=None),
                type=None)),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='K', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7fcfa5b847b8>,
                                    output=IndexExpr(matrix_name='Temp',
                                        indices=[Ref(name='i', type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None),
                                            IntConst(val=0, type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=None), Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=None), Ref(name='j', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='tree_depth', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=None),
                                    max=Ref(name='K', type=None),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=None),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7fcfa5b840d0>,
                                            output=IndexExpr(matrix_name='Temp',
                                                indices=[Ref(name='i', type=None),
                                                    Ref(name='j', type=None),
                                                    Ref(name='k', type=None),
                                                    BinOp(op='Add',
                                                        left=Ref(name='level', type=None),
                                                        right=IntConst(val=1, type=None),
                                                        type=None)]),
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4, type=None),
                                                                right=Ref(name='level', type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7fcfa5b84d08>,
                            output=IndexExpr(matrix_name='Out',
                                indices=[Ref(name='i', type=None), Ref(name='j', type=None)]),
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='tree_depth', type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>,
        <class 'int'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>])

2020-04-10 17:25:54,912 - root - DEBUG - typed IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(
            lhs=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7fcfa5b847b8>,
                                    output=[
                                        IndexExpr(matrix_name='Temp',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                    max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.IntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7fcfa5b840d0>,
                                            output=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=Ref(name='level',
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7fcfa5b84d08>,
                            output=[
                                IndexExpr(matrix_name='Out',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>])

2020-04-10 17:26:01,992 - root - INFO - [2020-04-10 17:26:01.992286] Starting with 32 cores
2020-04-10 17:26:07,458 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-10 17:26:07,459 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 17:26:07,459 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-10 17:27:09,518 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-10 17:27:15,850 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 17:27:15,851 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7ff73e1db400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7ff73e1db400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 17:27:15,852 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7ff73e1db400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7ff73e1db400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 17:27:16,730 - root - INFO - Starting with 32 cores
2020-04-10 17:27:21,778 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-10 17:27:21,778 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-10 17:27:21,778 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-11 15:27:38,864 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-11 15:28:00,663 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:28:00,664 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7fc063f01a60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7fc063f01d08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7fc063f01950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7fc063f01a60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7fc063f01d08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7fc063f01950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:28:00,665 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7fc063f01a60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7fc063f01d08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7fc063f01950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7fc063f01a60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7fc063f01d08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7fc063f01950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:28:01,520 - root - INFO - Starting with 32 cores
2020-04-11 15:28:07,005 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-11 15:28:07,005 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:28:07,005 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-11 15:29:15,132 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-11 15:29:18,718 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-11 15:29:19,491 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:29:19,493 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7fbb32352a60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7fbb32352d08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7fbb32352950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7fbb32352a60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7fbb32352d08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7fbb32352950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:29:19,494 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7fbb32352a60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7fbb32352d08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7fbb32352950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7fbb32352a60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7fbb32352d08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7fbb32352950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:29:20,099 - root - INFO - Starting with 32 cores
2020-04-11 15:29:25,811 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-11 15:29:25,811 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:29:25,811 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-11 15:30:04,131 - root - INFO - Logging to 810a5db0ab5dd4507fbfd189bab38873.log
2020-04-11 15:30:04,887 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:30:04,889 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f6f43538a60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f6f43538d08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f6f43538950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f6f43538a60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f6f43538d08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f6f43538950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:30:04,890 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f6f43538a60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f6f43538d08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f6f43538950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f6f43538a60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f6f43538d08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f6f43538950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:30:05,621 - root - INFO - Starting with 32 cores
2020-04-11 15:30:11,100 - root - DEBUG - 5: Up Workers: 0, Busy Workers: 0
2020-04-11 15:30:11,100 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:30:11,100 - root - INFO - 5: Up Workers: 0, Busy Workers: 0
2020-04-21 17:50:09,850 - root - INFO - [2020-04-21 17:50:09.850561] Logging to 810a5db0ab5dd4507fbfd189bab38873.log.
2020-04-21 17:54:29,920 - root - INFO - [2020-04-21 17:54:29.920686] Logging to 810a5db0ab5dd4507fbfd189bab38873.log.
2020-04-21 17:54:51,703 - root - DEBUG - Python AST:
FunctionDef(name='GEMM',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='B', annotation=Name(id='BigMatrix')),
            arg(arg='M', annotation=Name(id='int')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='K', annotation=Name(id='int')),
            arg(arg='Temp', annotation=Name(id='BigMatrix')),
            arg(arg='Out', annotation=Name(id='BigMatrix'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(targets=[Name(id='tree_depth')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='K')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=4)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='K')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='Temp'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k'), Num(n=0)])))],
                                    value=Call(func=Name(id='gemm'),
                                        args=[
                                            Subscript(value=Name(id='A'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='k')]))),
                                            Subscript(value=Name(id='B'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='j')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='level'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='tree_depth')], keywords=[]),
                            body=[
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[Num(n=0),
                                            Name(id='K'),
                                            BinOp(left=Num(n=4),
                                                op=Pow,
                                                right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(value=Name(id='Temp'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Name(id='i'),
                                                                Name(id='j'),
                                                                Name(id='k'),
                                                                BinOp(left=Name(id='level'), op=Add, right=Num(n=1))])))],
                                            value=Call(func=Name(id='add_matrices'),
                                                args=[
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    Name(id='k'),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=4),
                                                                            op=Pow,
                                                                            right=Name(id='level'))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=3),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='Out'),
                                    slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j')])))],
                            value=Call(func=Name(id='identity'),
                                args=[
                                    Subscript(value=Name(id='Temp'),
                                        slice=Index(
                                            value=Tuple(elts=[Name(id='i'), Name(id='j'), Num(n=0), Name(id='tree_depth')],
                                                )))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 17:54:51,704 - root - DEBUG - IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(lhs=Ref(name='tree_depth', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='K', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=4, type=None), type=None),
                    type=None),
                type=None)),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='K', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7f74cf1e68c8>,
                                    output=IndexExpr(matrix_name='Temp',
                                        indices=[Ref(name='i', type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None),
                                            IntConst(val=0, type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=None), Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=None), Ref(name='j', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='tree_depth', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=None),
                                    max=Ref(name='K', type=None),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=None),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7f74cf1e61e0>,
                                            output=IndexExpr(matrix_name='Temp',
                                                indices=[Ref(name='i', type=None),
                                                    Ref(name='j', type=None),
                                                    Ref(name='k', type=None),
                                                    BinOp(op='Add',
                                                        left=Ref(name='level', type=None),
                                                        right=IntConst(val=1, type=None),
                                                        type=None)]),
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4, type=None),
                                                                right=Ref(name='level', type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7f74cf1e6e18>,
                            output=IndexExpr(matrix_name='Out',
                                indices=[Ref(name='i', type=None), Ref(name='j', type=None)]),
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='tree_depth', type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>,
        <class 'int'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>])

2020-04-21 17:54:51,706 - root - DEBUG - typed IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(
            lhs=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7f74cf1e68c8>,
                                    output=[
                                        IndexExpr(matrix_name='Temp',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                    max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.IntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7f74cf1e61e0>,
                                            output=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=Ref(name='level',
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7f74cf1e6e18>,
                            output=[
                                IndexExpr(matrix_name='Out',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>])

2020-04-21 18:31:26,081 - root - INFO - [2020-04-21 18:31:26.081317] Logging to 810a5db0ab5dd4507fbfd189bab38873.log.
2020-04-21 18:31:26,883 - root - DEBUG - Python AST:
FunctionDef(name='GEMM',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='B', annotation=Name(id='BigMatrix')),
            arg(arg='M', annotation=Name(id='int')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='K', annotation=Name(id='int')),
            arg(arg='Temp', annotation=Name(id='BigMatrix')),
            arg(arg='Out', annotation=Name(id='BigMatrix'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(targets=[Name(id='tree_depth')],
            value=Call(func=Name(id='ceiling'),
                args=[
                    BinOp(left=Call(func=Name(id='log'), args=[Name(id='K')], keywords=[]),
                        op=Div,
                        right=Call(func=Name(id='log'), args=[Num(n=4)], keywords=[]))],
                keywords=[])),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='K')], keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='Temp'),
                                            slice=Index(
                                                value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k'), Num(n=0)])))],
                                    value=Call(func=Name(id='gemm'),
                                        args=[
                                            Subscript(value=Name(id='A'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='k')]))),
                                            Subscript(value=Name(id='B'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='j')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        For(target=Name(id='level'),
                            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='tree_depth')], keywords=[]),
                            body=[
                                For(target=Name(id='k'),
                                    iter=Call(func=Name(id='range'),
                                        args=[Num(n=0),
                                            Name(id='K'),
                                            BinOp(left=Num(n=4),
                                                op=Pow,
                                                right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Subscript(value=Name(id='Temp'),
                                                    slice=Index(
                                                        value=Tuple(
                                                            elts=[Name(id='i'),
                                                                Name(id='j'),
                                                                Name(id='k'),
                                                                BinOp(left=Name(id='level'), op=Add, right=Num(n=1))])))],
                                            value=Call(func=Name(id='add_matrices'),
                                                args=[
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    Name(id='k'),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=4),
                                                                            op=Pow,
                                                                            right=Name(id='level'))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=2),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')]))),
                                                    Subscript(value=Name(id='Temp'),
                                                        slice=Index(
                                                            value=Tuple(
                                                                elts=[Name(id='i'),
                                                                    Name(id='j'),
                                                                    BinOp(left=Name(id='k'),
                                                                        op=Add,
                                                                        right=BinOp(left=Num(n=3),
                                                                            op=Mult,
                                                                            right=BinOp(left=Num(n=4),
                                                                                op=Pow,
                                                                                right=Name(id='level')))),
                                                                    Name(id='level')])))],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='M')], keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='Out'),
                                    slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j')])))],
                            value=Call(func=Name(id='identity'),
                                args=[
                                    Subscript(value=Name(id='Temp'),
                                        slice=Index(
                                            value=Tuple(elts=[Name(id='i'), Name(id='j'), Num(n=0), Name(id='tree_depth')],
                                                )))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-21 18:31:26,884 - root - DEBUG - IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(lhs=Ref(name='tree_depth', type=None),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='K', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=4, type=None), type=None),
                    type=None),
                type=None)),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='K', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7fb8d63f08c8>,
                                    output=IndexExpr(matrix_name='Temp',
                                        indices=[Ref(name='i', type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None),
                                            IntConst(val=0, type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=None), Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=None), Ref(name='j', type=None)])],
                                    kwargs=None,
                                    type=None)])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=None),
                            max=Ref(name='tree_depth', type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=None),
                                    max=Ref(name='K', type=None),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=None),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        type=None),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7fb8d63f01e0>,
                                            output=IndexExpr(matrix_name='Temp',
                                                indices=[Ref(name='i', type=None),
                                                    Ref(name='j', type=None),
                                                    Ref(name='k', type=None),
                                                    BinOp(op='Add',
                                                        left=Ref(name='level', type=None),
                                                        right=IntConst(val=1, type=None),
                                                        type=None)]),
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        Ref(name='k', type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4, type=None),
                                                                right=Ref(name='level', type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=None),
                                                        Ref(name='j', type=None),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k', type=None),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3, type=None),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4, type=None),
                                                                    right=Ref(name='level', type=None),
                                                                    type=None),
                                                                type=None),
                                                            type=None),
                                                        Ref(name='level', type=None)])],
                                            kwargs=None,
                                            type=None)])])])]),
        For(var='i',
            min=IntConst(val=0, type=None),
            max=Ref(name='M', type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7fb8d63f0e18>,
                            output=IndexExpr(matrix_name='Out',
                                indices=[Ref(name='i', type=None), Ref(name='j', type=None)]),
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        IntConst(val=0, type=None),
                                        Ref(name='tree_depth', type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>,
        <class 'int'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>])

2020-04-21 18:31:26,886 - root - DEBUG - typed IR AST:
FuncDef(name='GEMM',
    args=['A', 'B', 'M', 'N', 'K', 'Temp', 'Out'],
    body=[
        Assign(
            lhs=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
            rhs=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>)),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='k',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function gemm at 0x7fb8d63f08c8>,
                                    output=[
                                        IndexExpr(matrix_name='Temp',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='A',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='B',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        For(var='level',
                            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                            max=Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                For(var='k',
                                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                    max=Ref(name='K', type=<class 'numpywren.frontend.ConstIntType'>),
                                    step=BinOp(op='Pow',
                                        left=IntConst(val=4, type=<class 'numpywren.frontend.ConstIntType'>),
                                        right=BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        type=<class 'numpywren.frontend.IntType'>),
                                    body=[
                                        RemoteCallAbstract(compute=<function add_matrices at 0x7fb8d63f01e0>,
                                            output=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='level',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=IntConst(val=1,
                                                                type=<class 'numpywren.frontend.ConstIntType'>),
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            args=[
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Pow',
                                                                left=IntConst(val=4,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=Ref(name='level',
                                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=2,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)]),
                                                IndexExpr(matrix_name='Temp',
                                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                        BinOp(op='Add',
                                                            left=Ref(name='k',
                                                                type=<class 'numpywren.frontend.LinearIntType'>),
                                                            right=BinOp(op='Mult',
                                                                left=IntConst(val=3,
                                                                    type=<class 'numpywren.frontend.ConstIntType'>),
                                                                right=BinOp(op='Pow',
                                                                    left=IntConst(val=4,
                                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                                    right=Ref(name='level',
                                                                        type=<class 'numpywren.frontend.LinearIntType'>),
                                                                    type=<class 'numpywren.frontend.IntType'>),
                                                                type=<class 'numpywren.frontend.IntType'>),
                                                            type=<class 'numpywren.frontend.IntType'>),
                                                        Ref(name='level',
                                                            type=<class 'numpywren.frontend.LinearIntType'>)])],
                                            kwargs=None,
                                            type=<class 'type'>)])])])]),
        For(var='i',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='M', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function identity at 0x7fb8d63f0e18>,
                            output=[
                                IndexExpr(matrix_name='Out',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Temp',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='tree_depth', type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>])

