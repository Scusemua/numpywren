2020-04-10 18:17:39,336 - root - INFO - Logging to a62655aaaffa2e9935e675e61e8324a8.log
2020-04-10 18:17:40,867 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 18:17:40,869 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f3180cfd400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f3180cfd400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 18:17:40,870 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f3180cfd400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f3180cfd400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 18:17:41,914 - root - INFO - Starting with 32 cores
2020-04-10 18:17:46,963 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 3
2020-04-10 18:17:46,963 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 18:17:46,963 - root - INFO - 5: Up Workers: 32, Busy Workers: 3
2020-04-10 18:17:52,015 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 1
2020-04-10 18:17:52,015 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:17:52,015 - root - INFO - 10: Up Workers: 32, Busy Workers: 1
2020-04-10 18:17:57,069 - root - DEBUG - 15: Up Workers: 32, Busy Workers: 1
2020-04-10 18:17:57,069 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:17:57,069 - root - INFO - 15: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:02,117 - root - DEBUG - 20: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:02,117 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:18:02,117 - root - INFO - 20: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:07,166 - root - DEBUG - 25: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:07,166 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:18:07,166 - root - INFO - 25: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:12,211 - root - DEBUG - 30: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:12,211 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:18:12,211 - root - INFO - 30: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:17,418 - root - DEBUG - 35: Up Workers: 32, Busy Workers: 1
2020-04-10 18:18:17,418 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:18:17,418 - root - INFO - 35: Up Workers: 32, Busy Workers: 1
2020-04-10 18:26:39,212 - root - INFO - Logging to a62655aaaffa2e9935e675e61e8324a8.log
2020-04-10 18:26:40,840 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 18:26:40,842 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc9e3849400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc9e3849400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 18:26:40,843 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc9e3849400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc9e3849400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 18:26:41,826 - root - INFO - Starting with 32 cores
2020-04-10 18:26:46,900 - root - DEBUG - 5: Up Workers: 17, Busy Workers: 3
2020-04-10 18:26:46,900 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 18:26:46,900 - root - INFO - 5: Up Workers: 17, Busy Workers: 3
2020-04-10 18:26:51,947 - root - DEBUG - 10: Up Workers: 17, Busy Workers: 1
2020-04-10 18:26:51,947 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:26:51,947 - root - INFO - 10: Up Workers: 17, Busy Workers: 1
2020-04-10 18:26:56,995 - root - DEBUG - 15: Up Workers: 17, Busy Workers: 1
2020-04-10 18:26:56,995 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:26:56,995 - root - INFO - 15: Up Workers: 17, Busy Workers: 1
2020-04-10 18:27:02,054 - root - DEBUG - 20: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:02,054 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:02,054 - root - INFO - 20: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:07,108 - root - DEBUG - 25: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:07,108 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:07,108 - root - INFO - 25: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:12,154 - root - DEBUG - 30: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:12,155 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:12,155 - root - INFO - 30: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:17,201 - root - DEBUG - 35: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:17,201 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:17,201 - root - INFO - 35: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:22,246 - root - DEBUG - 40: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:22,246 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:22,246 - root - INFO - 40: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:27,300 - root - DEBUG - 45: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:27,300 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:27,300 - root - INFO - 45: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:32,347 - root - DEBUG - 50: Up Workers: 32, Busy Workers: 1
2020-04-10 18:27:32,347 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 18:27:32,347 - root - INFO - 50: Up Workers: 32, Busy Workers: 1
2020-04-11 15:36:44,895 - root - INFO - Logging to a62655aaaffa2e9935e675e61e8324a8.log
2020-04-11 15:40:57,142 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-11 15:40:57,143 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f1be755da60>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f1be755dd08>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f1be755d950>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f1be755da60>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f1be755dd08>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f1be755d950>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2020-04-11 15:40:57,145 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f1be755da60>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f1be755dd08>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f1be755d950>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f1be755da60>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f1be755dd08>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f1be755d950>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-11 15:40:57,768 - root - INFO - Starting with 32 cores
2020-04-11 15:41:03,241 - root - DEBUG - 5: Up Workers: 32, Busy Workers: 20
2020-04-11 15:41:03,241 - root - INFO - Waiting: 0, Currently Processing: 20
2020-04-11 15:41:03,241 - root - INFO - 5: Up Workers: 32, Busy Workers: 20
2020-04-11 15:41:08,373 - root - DEBUG - 10: Up Workers: 32, Busy Workers: 15
2020-04-11 15:41:08,373 - root - INFO - Waiting: 0, Currently Processing: 15
2020-04-11 15:41:08,373 - root - INFO - 10: Up Workers: 32, Busy Workers: 15
2020-04-11 15:41:13,437 - root - DEBUG - 15: Up Workers: 32, Busy Workers: 13
2020-04-11 15:41:13,438 - root - INFO - Waiting: 0, Currently Processing: 13
2020-04-11 15:41:13,438 - root - INFO - 15: Up Workers: 32, Busy Workers: 13
2020-04-11 15:41:18,488 - root - DEBUG - 20: Up Workers: 32, Busy Workers: 2
2020-04-11 15:41:18,488 - root - INFO - Waiting: 0, Currently Processing: 2
2020-04-11 15:41:18,488 - root - INFO - 20: Up Workers: 32, Busy Workers: 2
2020-04-11 15:41:23,546 - root - DEBUG - 25: Up Workers: 0, Busy Workers: 0
2020-04-11 15:41:23,546 - root - INFO - Waiting: 0, Currently Processing: 0
2020-04-11 15:41:23,546 - root - INFO - 25: Up Workers: 0, Busy Workers: 0
