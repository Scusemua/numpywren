2020-04-10 20:24:15,601 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:24:37,637 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:24:37,638 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc7d8210400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc7d8210400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:24:37,639 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7fc7d8210400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7fc7d8210400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:24:42,357 - root - INFO - Starting with 2048 cores
2020-04-10 20:24:47,543 - root - DEBUG - 5: Up Workers: 288, Busy Workers: 249
2020-04-10 20:24:47,545 - root - INFO - Waiting: 0, Currently Processing: 252
2020-04-10 20:24:47,545 - root - INFO - 5: Up Workers: 288, Busy Workers: 249
2020-04-10 20:24:53,560 - root - DEBUG - 11: Up Workers: 288, Busy Workers: 12
2020-04-10 20:24:58,607 - root - DEBUG - 16: Up Workers: 289, Busy Workers: 1
2020-04-10 20:25:03,701 - root - DEBUG - 21: Up Workers: 1058, Busy Workers: 1
2020-04-10 20:25:08,750 - root - DEBUG - 26: Up Workers: 1871, Busy Workers: 1
2020-04-10 20:25:13,795 - root - DEBUG - 31: Up Workers: 1917, Busy Workers: 1
2020-04-10 20:25:18,841 - root - DEBUG - 36: Up Workers: 1941, Busy Workers: 1
2020-04-10 20:25:23,887 - root - DEBUG - 41: Up Workers: 1963, Busy Workers: 1
2020-04-10 20:25:28,932 - root - DEBUG - 46: Up Workers: 1972, Busy Workers: 1
2020-04-10 20:25:33,980 - root - DEBUG - 51: Up Workers: 1982, Busy Workers: 1
2020-04-10 20:25:39,094 - root - DEBUG - 56: Up Workers: 1994, Busy Workers: 1
2020-04-10 20:25:44,139 - root - DEBUG - 61: Up Workers: 2005, Busy Workers: 1
2020-04-10 20:25:49,179 - root - DEBUG - 66: Up Workers: 2013, Busy Workers: 1
2020-04-10 20:25:54,246 - root - DEBUG - 71: Up Workers: 2023, Busy Workers: 1
2020-04-10 20:25:59,292 - root - DEBUG - 76: Up Workers: 2030, Busy Workers: 1
2020-04-10 20:26:04,338 - root - DEBUG - 81: Up Workers: 2035, Busy Workers: 1
2020-04-10 20:26:09,387 - root - DEBUG - 86: Up Workers: 2039, Busy Workers: 1
2020-04-10 20:26:14,432 - root - DEBUG - 92: Up Workers: 2039, Busy Workers: 1
2020-04-10 20:26:19,479 - root - DEBUG - 97: Up Workers: 2040, Busy Workers: 1
2020-04-10 20:26:24,528 - root - DEBUG - 102: Up Workers: 2042, Busy Workers: 1
2020-04-10 20:26:29,572 - root - DEBUG - 107: Up Workers: 2042, Busy Workers: 1
2020-04-10 20:26:34,620 - root - DEBUG - 112: Up Workers: 2043, Busy Workers: 1
2020-04-10 20:26:39,667 - root - DEBUG - 117: Up Workers: 2043, Busy Workers: 1
2020-04-10 20:26:44,713 - root - DEBUG - 122: Up Workers: 2043, Busy Workers: 1
2020-04-10 20:26:44,721 - root - INFO - launching 32 new tasks....
2020-04-10 20:26:49,763 - root - DEBUG - 127: Up Workers: 2043, Busy Workers: 2
2020-04-10 20:26:54,808 - root - DEBUG - 132: Up Workers: 2043, Busy Workers: 2
2020-04-10 20:26:59,862 - root - DEBUG - 137: Up Workers: 2, Busy Workers: 1
2020-04-10 20:27:59,904 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:28:21,564 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:28:21,565 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:28:21,566 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:28:25,877 - root - INFO - Starting with 2048 cores
2020-04-10 20:28:36,027 - root - DEBUG - 10: Up Workers: 2019, Busy Workers: 188
2020-04-10 20:28:36,027 - root - INFO - Waiting: 0, Currently Processing: 188
2020-04-10 20:28:36,027 - root - INFO - 10: Up Workers: 2019, Busy Workers: 188
2020-04-10 20:28:41,074 - root - DEBUG - 15: Up Workers: 2021, Busy Workers: 40
2020-04-10 20:28:41,074 - root - INFO - Waiting: 1, Currently Processing: 40
2020-04-10 20:28:41,074 - root - INFO - 15: Up Workers: 2021, Busy Workers: 40
2020-04-10 20:28:46,122 - root - DEBUG - 20: Up Workers: 2021, Busy Workers: 8
2020-04-10 20:28:46,122 - root - INFO - Waiting: 1, Currently Processing: 40
2020-04-10 20:28:46,122 - root - INFO - 20: Up Workers: 2021, Busy Workers: 8
2020-04-10 20:28:51,170 - root - DEBUG - 25: Up Workers: 2043, Busy Workers: 7
2020-04-10 20:28:51,170 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:28:51,170 - root - INFO - 25: Up Workers: 2043, Busy Workers: 7
2020-04-10 20:28:56,218 - root - DEBUG - 30: Up Workers: 2043, Busy Workers: 7
2020-04-10 20:28:56,218 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:28:56,218 - root - INFO - 30: Up Workers: 2043, Busy Workers: 7
2020-04-10 20:29:01,267 - root - DEBUG - 35: Up Workers: 2044, Busy Workers: 7
2020-04-10 20:29:01,267 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:01,267 - root - INFO - 35: Up Workers: 2044, Busy Workers: 7
2020-04-10 20:29:06,312 - root - DEBUG - 40: Up Workers: 2044, Busy Workers: 7
2020-04-10 20:29:06,313 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:06,313 - root - INFO - 40: Up Workers: 2044, Busy Workers: 7
2020-04-10 20:29:11,361 - root - DEBUG - 45: Up Workers: 2044, Busy Workers: 7
2020-04-10 20:29:11,361 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:11,361 - root - INFO - 45: Up Workers: 2044, Busy Workers: 7
2020-04-10 20:29:16,407 - root - DEBUG - 50: Up Workers: 2045, Busy Workers: 7
2020-04-10 20:29:16,407 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:16,407 - root - INFO - 50: Up Workers: 2045, Busy Workers: 7
2020-04-10 20:29:21,450 - root - DEBUG - 55: Up Workers: 2047, Busy Workers: 7
2020-04-10 20:29:21,450 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:21,450 - root - INFO - 55: Up Workers: 2047, Busy Workers: 7
2020-04-10 20:29:26,496 - root - DEBUG - 60: Up Workers: 2047, Busy Workers: 7
2020-04-10 20:29:26,496 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:26,496 - root - INFO - 60: Up Workers: 2047, Busy Workers: 7
2020-04-10 20:29:31,542 - root - DEBUG - 65: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:31,542 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:31,542 - root - INFO - 65: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:36,589 - root - DEBUG - 70: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:36,589 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:36,589 - root - INFO - 70: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:41,637 - root - DEBUG - 75: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:41,637 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:41,637 - root - INFO - 75: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:46,682 - root - DEBUG - 80: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:46,683 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:46,683 - root - INFO - 80: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:51,739 - root - DEBUG - 85: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:51,739 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:51,739 - root - INFO - 85: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:56,784 - root - DEBUG - 90: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:29:56,785 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:29:56,785 - root - INFO - 90: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:01,832 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:01,832 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:30:01,832 - root - INFO - 95: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:06,893 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:06,893 - root - INFO - Waiting: 0, Currently Processing: 7
2020-04-10 20:30:06,893 - root - INFO - 100: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:11,967 - root - DEBUG - 106: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:17,055 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:22,102 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:27,146 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 7
2020-04-10 20:30:27,153 - root - INFO - launching 32 new tasks....
2020-04-10 20:30:32,196 - root - DEBUG - 126: Up Workers: 2075, Busy Workers: 12
2020-04-10 20:30:37,241 - root - DEBUG - 131: Up Workers: 2075, Busy Workers: 9
2020-04-10 20:30:42,289 - root - DEBUG - 136: Up Workers: 2075, Busy Workers: 9
2020-04-10 20:30:47,336 - root - DEBUG - 141: Up Workers: 17, Busy Workers: 7
2020-04-10 20:30:48,146 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:30:48,146 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:31:10,174 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:31:10,174 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:31:10,175 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:31:10,175 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:31:10,176 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:31:10,176 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:31:13,940 - root - INFO - Starting with 2048 cores
2020-04-10 20:31:13,940 - root - INFO - Starting with 2048 cores
2020-04-10 20:31:24,053 - root - DEBUG - 10: Up Workers: 1945, Busy Workers: 178
2020-04-10 20:31:24,053 - root - DEBUG - 10: Up Workers: 1945, Busy Workers: 178
2020-04-10 20:31:24,053 - root - INFO - Waiting: 0, Currently Processing: 178
2020-04-10 20:31:24,053 - root - INFO - Waiting: 0, Currently Processing: 178
2020-04-10 20:31:24,053 - root - INFO - 10: Up Workers: 1945, Busy Workers: 178
2020-04-10 20:31:24,053 - root - INFO - 10: Up Workers: 1945, Busy Workers: 178
2020-04-10 20:31:29,099 - root - DEBUG - 15: Up Workers: 1955, Busy Workers: 25
2020-04-10 20:31:29,099 - root - DEBUG - 15: Up Workers: 1955, Busy Workers: 25
2020-04-10 20:31:29,100 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:31:29,100 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:31:29,100 - root - INFO - 15: Up Workers: 1955, Busy Workers: 25
2020-04-10 20:31:29,100 - root - INFO - 15: Up Workers: 1955, Busy Workers: 25
2020-04-10 20:31:34,147 - root - DEBUG - 20: Up Workers: 1982, Busy Workers: 4
2020-04-10 20:31:34,147 - root - DEBUG - 20: Up Workers: 1982, Busy Workers: 4
2020-04-10 20:31:34,147 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:34,147 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:34,148 - root - INFO - 20: Up Workers: 1982, Busy Workers: 4
2020-04-10 20:31:34,148 - root - INFO - 20: Up Workers: 1982, Busy Workers: 4
2020-04-10 20:31:39,252 - root - DEBUG - 25: Up Workers: 2037, Busy Workers: 4
2020-04-10 20:31:39,252 - root - DEBUG - 25: Up Workers: 2037, Busy Workers: 4
2020-04-10 20:31:39,253 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:39,253 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:39,253 - root - INFO - 25: Up Workers: 2037, Busy Workers: 4
2020-04-10 20:31:39,253 - root - INFO - 25: Up Workers: 2037, Busy Workers: 4
2020-04-10 20:31:44,301 - root - DEBUG - 30: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:44,301 - root - DEBUG - 30: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:44,301 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:44,301 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:44,301 - root - INFO - 30: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:44,301 - root - INFO - 30: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:49,356 - root - DEBUG - 35: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:49,356 - root - DEBUG - 35: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:49,356 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:49,356 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:49,356 - root - INFO - 35: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:49,356 - root - INFO - 35: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:54,402 - root - DEBUG - 40: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:54,402 - root - DEBUG - 40: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:54,402 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:54,402 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:54,402 - root - INFO - 40: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:54,402 - root - INFO - 40: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:59,448 - root - DEBUG - 45: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:59,448 - root - DEBUG - 45: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:59,448 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:59,448 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:31:59,448 - root - INFO - 45: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:31:59,448 - root - INFO - 45: Up Workers: 2039, Busy Workers: 4
2020-04-10 20:32:04,493 - root - DEBUG - 50: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:32:04,493 - root - DEBUG - 50: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:32:04,493 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:04,493 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:04,493 - root - INFO - 50: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:32:04,493 - root - INFO - 50: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:32:09,539 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:09,539 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:09,539 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:09,539 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:09,539 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:09,539 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:14,584 - root - DEBUG - 60: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:14,584 - root - DEBUG - 60: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:14,585 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:14,585 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:14,585 - root - INFO - 60: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:14,585 - root - INFO - 60: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:32:19,633 - root - DEBUG - 65: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:19,633 - root - DEBUG - 65: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:19,633 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:19,633 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:19,634 - root - INFO - 65: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:19,634 - root - INFO - 65: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:24,683 - root - DEBUG - 70: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:24,683 - root - DEBUG - 70: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:24,683 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:24,683 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:24,683 - root - INFO - 70: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:24,683 - root - INFO - 70: Up Workers: 2043, Busy Workers: 4
2020-04-10 20:32:29,726 - root - DEBUG - 75: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:32:29,726 - root - DEBUG - 75: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:32:29,726 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:29,726 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:29,726 - root - INFO - 75: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:32:29,726 - root - INFO - 75: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:32:34,771 - root - DEBUG - 80: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:34,771 - root - DEBUG - 80: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:34,771 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:34,771 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:34,772 - root - INFO - 80: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:34,772 - root - INFO - 80: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:39,907 - root - DEBUG - 85: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:39,907 - root - DEBUG - 85: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:39,907 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:39,907 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:39,908 - root - INFO - 85: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:39,908 - root - INFO - 85: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:44,950 - root - DEBUG - 90: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:44,950 - root - DEBUG - 90: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:44,951 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:44,951 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:32:44,951 - root - INFO - 90: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:44,951 - root - INFO - 90: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:49,995 - root - DEBUG - 96: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:49,995 - root - DEBUG - 96: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:55,039 - root - DEBUG - 101: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:32:55,039 - root - DEBUG - 101: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:33:00,082 - root - DEBUG - 106: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:00,082 - root - DEBUG - 106: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:05,126 - root - DEBUG - 111: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:05,126 - root - DEBUG - 111: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:10,173 - root - DEBUG - 116: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:10,173 - root - DEBUG - 116: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:15,216 - root - DEBUG - 121: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:15,216 - root - DEBUG - 121: Up Workers: 2046, Busy Workers: 4
2020-04-10 20:33:15,223 - root - INFO - launching 32 new tasks....
2020-04-10 20:33:15,223 - root - INFO - launching 32 new tasks....
2020-04-10 20:33:20,265 - root - DEBUG - 126: Up Workers: 2064, Busy Workers: 5
2020-04-10 20:33:20,265 - root - DEBUG - 126: Up Workers: 2064, Busy Workers: 5
2020-04-10 20:33:25,305 - root - DEBUG - 131: Up Workers: 2064, Busy Workers: 5
2020-04-10 20:33:25,305 - root - DEBUG - 131: Up Workers: 2064, Busy Workers: 5
2020-04-10 20:33:30,360 - root - DEBUG - 136: Up Workers: 2064, Busy Workers: 6
2020-04-10 20:33:30,360 - root - DEBUG - 136: Up Workers: 2064, Busy Workers: 6
2020-04-10 20:33:35,408 - root - DEBUG - 141: Up Workers: 44, Busy Workers: 4
2020-04-10 20:33:35,408 - root - DEBUG - 141: Up Workers: 44, Busy Workers: 4
2020-04-10 20:33:36,330 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:33:36,330 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:33:36,330 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:33:57,894 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:33:57,894 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:33:57,894 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:33:57,895 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:33:57,895 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:33:57,895 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:33:57,896 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:33:57,896 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:33:57,896 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:34:01,648 - root - INFO - Starting with 2048 cores
2020-04-10 20:34:01,648 - root - INFO - Starting with 2048 cores
2020-04-10 20:34:01,648 - root - INFO - Starting with 2048 cores
2020-04-10 20:34:11,744 - root - DEBUG - 10: Up Workers: 1937, Busy Workers: 183
2020-04-10 20:34:11,744 - root - DEBUG - 10: Up Workers: 1937, Busy Workers: 183
2020-04-10 20:34:11,744 - root - DEBUG - 10: Up Workers: 1937, Busy Workers: 183
2020-04-10 20:34:11,744 - root - INFO - Waiting: 0, Currently Processing: 183
2020-04-10 20:34:11,744 - root - INFO - Waiting: 0, Currently Processing: 183
2020-04-10 20:34:11,744 - root - INFO - Waiting: 0, Currently Processing: 183
2020-04-10 20:34:11,744 - root - INFO - 10: Up Workers: 1937, Busy Workers: 183
2020-04-10 20:34:11,744 - root - INFO - 10: Up Workers: 1937, Busy Workers: 183
2020-04-10 20:34:11,744 - root - INFO - 10: Up Workers: 1937, Busy Workers: 183
2020-04-10 20:34:16,790 - root - DEBUG - 15: Up Workers: 1954, Busy Workers: 26
2020-04-10 20:34:16,790 - root - DEBUG - 15: Up Workers: 1954, Busy Workers: 26
2020-04-10 20:34:16,790 - root - DEBUG - 15: Up Workers: 1954, Busy Workers: 26
2020-04-10 20:34:16,791 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:34:16,791 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:34:16,791 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:34:16,791 - root - INFO - 15: Up Workers: 1954, Busy Workers: 26
2020-04-10 20:34:16,791 - root - INFO - 15: Up Workers: 1954, Busy Workers: 26
2020-04-10 20:34:16,791 - root - INFO - 15: Up Workers: 1954, Busy Workers: 26
2020-04-10 20:34:21,836 - root - DEBUG - 20: Up Workers: 1957, Busy Workers: 3
2020-04-10 20:34:21,836 - root - DEBUG - 20: Up Workers: 1957, Busy Workers: 3
2020-04-10 20:34:21,836 - root - DEBUG - 20: Up Workers: 1957, Busy Workers: 3
2020-04-10 20:34:21,836 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:34:21,836 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:34:21,836 - root - INFO - Waiting: 0, Currently Processing: 26
2020-04-10 20:34:21,836 - root - INFO - 20: Up Workers: 1957, Busy Workers: 3
2020-04-10 20:34:21,836 - root - INFO - 20: Up Workers: 1957, Busy Workers: 3
2020-04-10 20:34:21,836 - root - INFO - 20: Up Workers: 1957, Busy Workers: 3
2020-04-10 20:34:26,891 - root - DEBUG - 25: Up Workers: 2031, Busy Workers: 3
2020-04-10 20:34:26,891 - root - DEBUG - 25: Up Workers: 2031, Busy Workers: 3
2020-04-10 20:34:26,891 - root - DEBUG - 25: Up Workers: 2031, Busy Workers: 3
2020-04-10 20:34:26,892 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:26,892 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:26,892 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:26,892 - root - INFO - 25: Up Workers: 2031, Busy Workers: 3
2020-04-10 20:34:26,892 - root - INFO - 25: Up Workers: 2031, Busy Workers: 3
2020-04-10 20:34:26,892 - root - INFO - 25: Up Workers: 2031, Busy Workers: 3
2020-04-10 20:34:31,949 - root - DEBUG - 30: Up Workers: 2035, Busy Workers: 3
2020-04-10 20:34:31,949 - root - DEBUG - 30: Up Workers: 2035, Busy Workers: 3
2020-04-10 20:34:31,949 - root - DEBUG - 30: Up Workers: 2035, Busy Workers: 3
2020-04-10 20:34:31,949 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:31,949 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:31,949 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:31,949 - root - INFO - 30: Up Workers: 2035, Busy Workers: 3
2020-04-10 20:34:31,949 - root - INFO - 30: Up Workers: 2035, Busy Workers: 3
2020-04-10 20:34:31,949 - root - INFO - 30: Up Workers: 2035, Busy Workers: 3
2020-04-10 20:34:37,003 - root - DEBUG - 35: Up Workers: 2036, Busy Workers: 3
2020-04-10 20:34:37,003 - root - DEBUG - 35: Up Workers: 2036, Busy Workers: 3
2020-04-10 20:34:37,003 - root - DEBUG - 35: Up Workers: 2036, Busy Workers: 3
2020-04-10 20:34:37,004 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:37,004 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:37,004 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:37,004 - root - INFO - 35: Up Workers: 2036, Busy Workers: 3
2020-04-10 20:34:37,004 - root - INFO - 35: Up Workers: 2036, Busy Workers: 3
2020-04-10 20:34:37,004 - root - INFO - 35: Up Workers: 2036, Busy Workers: 3
2020-04-10 20:34:42,048 - root - DEBUG - 40: Up Workers: 2039, Busy Workers: 3
2020-04-10 20:34:42,048 - root - DEBUG - 40: Up Workers: 2039, Busy Workers: 3
2020-04-10 20:34:42,048 - root - DEBUG - 40: Up Workers: 2039, Busy Workers: 3
2020-04-10 20:34:42,048 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:42,048 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:42,048 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:42,048 - root - INFO - 40: Up Workers: 2039, Busy Workers: 3
2020-04-10 20:34:42,048 - root - INFO - 40: Up Workers: 2039, Busy Workers: 3
2020-04-10 20:34:42,048 - root - INFO - 40: Up Workers: 2039, Busy Workers: 3
2020-04-10 20:34:47,085 - root - DEBUG - 45: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:47,085 - root - DEBUG - 45: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:47,085 - root - DEBUG - 45: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:47,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:47,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:47,085 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:47,086 - root - INFO - 45: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:47,086 - root - INFO - 45: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:47,086 - root - INFO - 45: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:52,129 - root - DEBUG - 50: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:52,129 - root - DEBUG - 50: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:52,129 - root - DEBUG - 50: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:52,130 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:52,130 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:52,130 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:52,130 - root - INFO - 50: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:52,130 - root - INFO - 50: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:52,130 - root - INFO - 50: Up Workers: 2040, Busy Workers: 3
2020-04-10 20:34:57,176 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:34:57,176 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:34:57,176 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:34:57,176 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:57,176 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:57,176 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:34:57,176 - root - INFO - 55: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:34:57,176 - root - INFO - 55: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:34:57,176 - root - INFO - 55: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:02,218 - root - DEBUG - 60: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:02,218 - root - DEBUG - 60: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:02,218 - root - DEBUG - 60: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:02,218 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:02,218 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:02,218 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:02,218 - root - INFO - 60: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:02,218 - root - INFO - 60: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:02,218 - root - INFO - 60: Up Workers: 2042, Busy Workers: 3
2020-04-10 20:35:07,262 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:07,262 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:07,262 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:07,262 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:07,262 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:07,262 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:07,262 - root - INFO - 65: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:07,262 - root - INFO - 65: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:07,262 - root - INFO - 65: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:12,304 - root - DEBUG - 70: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:12,304 - root - DEBUG - 70: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:12,304 - root - DEBUG - 70: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:12,305 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:12,305 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:12,305 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:12,305 - root - INFO - 70: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:12,305 - root - INFO - 70: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:12,305 - root - INFO - 70: Up Workers: 2044, Busy Workers: 3
2020-04-10 20:35:17,348 - root - DEBUG - 75: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:17,348 - root - DEBUG - 75: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:17,348 - root - DEBUG - 75: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:17,348 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:17,348 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:17,348 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:17,348 - root - INFO - 75: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:17,348 - root - INFO - 75: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:17,348 - root - INFO - 75: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:22,396 - root - DEBUG - 80: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:22,396 - root - DEBUG - 80: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:22,396 - root - DEBUG - 80: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:22,396 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:22,396 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:22,396 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:22,396 - root - INFO - 80: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:22,396 - root - INFO - 80: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:22,396 - root - INFO - 80: Up Workers: 2046, Busy Workers: 3
2020-04-10 20:35:27,441 - root - DEBUG - 85: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:27,441 - root - DEBUG - 85: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:27,441 - root - DEBUG - 85: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:27,442 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:27,442 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:27,442 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:27,442 - root - INFO - 85: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:27,442 - root - INFO - 85: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:27,442 - root - INFO - 85: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:32,490 - root - DEBUG - 90: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:32,490 - root - DEBUG - 90: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:32,490 - root - DEBUG - 90: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:32,490 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:32,490 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:32,490 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:32,490 - root - INFO - 90: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:32,490 - root - INFO - 90: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:32,490 - root - INFO - 90: Up Workers: 2047, Busy Workers: 3
2020-04-10 20:35:37,532 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:37,532 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:37,532 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:37,533 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:37,533 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:37,533 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:37,533 - root - INFO - 95: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:37,533 - root - INFO - 95: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:37,533 - root - INFO - 95: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:42,577 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:42,577 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:42,577 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:42,577 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:42,577 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:42,577 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:42,577 - root - INFO - 100: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:42,577 - root - INFO - 100: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:42,577 - root - INFO - 100: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:47,622 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:47,622 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:47,622 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:47,622 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:47,622 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:47,622 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:47,622 - root - INFO - 105: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:47,622 - root - INFO - 105: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:47,622 - root - INFO - 105: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:52,664 - root - DEBUG - 110: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:52,664 - root - DEBUG - 110: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:52,664 - root - DEBUG - 110: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:52,664 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:52,664 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:52,664 - root - INFO - Waiting: 0, Currently Processing: 3
2020-04-10 20:35:52,664 - root - INFO - 110: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:52,664 - root - INFO - 110: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:52,664 - root - INFO - 110: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:57,718 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:57,718 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:35:57,718 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:36:02,764 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:36:02,764 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:36:02,764 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 3
2020-04-10 20:36:02,771 - root - INFO - launching 32 new tasks....
2020-04-10 20:36:02,771 - root - INFO - launching 32 new tasks....
2020-04-10 20:36:02,771 - root - INFO - launching 32 new tasks....
2020-04-10 20:36:07,809 - root - DEBUG - 126: Up Workers: 2065, Busy Workers: 4
2020-04-10 20:36:07,809 - root - DEBUG - 126: Up Workers: 2065, Busy Workers: 4
2020-04-10 20:36:07,809 - root - DEBUG - 126: Up Workers: 2065, Busy Workers: 4
2020-04-10 20:36:12,864 - root - DEBUG - 131: Up Workers: 2065, Busy Workers: 4
2020-04-10 20:36:12,864 - root - DEBUG - 131: Up Workers: 2065, Busy Workers: 4
2020-04-10 20:36:12,864 - root - DEBUG - 131: Up Workers: 2065, Busy Workers: 4
2020-04-10 20:36:17,912 - root - DEBUG - 136: Up Workers: 2065, Busy Workers: 5
2020-04-10 20:36:17,912 - root - DEBUG - 136: Up Workers: 2065, Busy Workers: 5
2020-04-10 20:36:17,912 - root - DEBUG - 136: Up Workers: 2065, Busy Workers: 5
2020-04-10 20:36:22,959 - root - DEBUG - 141: Up Workers: 2076, Busy Workers: 4
2020-04-10 20:36:22,959 - root - DEBUG - 141: Up Workers: 2076, Busy Workers: 4
2020-04-10 20:36:22,959 - root - DEBUG - 141: Up Workers: 2076, Busy Workers: 4
2020-04-10 20:36:28,007 - root - DEBUG - 146: Up Workers: 0, Busy Workers: 3
2020-04-10 20:36:28,007 - root - DEBUG - 146: Up Workers: 0, Busy Workers: 3
2020-04-10 20:36:28,007 - root - DEBUG - 146: Up Workers: 0, Busy Workers: 3
2020-04-10 20:36:28,796 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:36:28,796 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:36:28,796 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:36:28,796 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:36:50,343 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:36:50,343 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:36:50,343 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:36:50,343 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:36:50,344 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:36:50,344 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:36:50,344 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:36:50,344 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:36:50,345 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:36:50,345 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:36:50,345 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:36:50,345 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:36:53,772 - root - INFO - Starting with 2048 cores
2020-04-10 20:36:53,772 - root - INFO - Starting with 2048 cores
2020-04-10 20:36:53,772 - root - INFO - Starting with 2048 cores
2020-04-10 20:36:53,772 - root - INFO - Starting with 2048 cores
2020-04-10 20:37:03,878 - root - DEBUG - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - DEBUG - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - DEBUG - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - DEBUG - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - INFO - Waiting: 0, Currently Processing: 182
2020-04-10 20:37:03,878 - root - INFO - Waiting: 0, Currently Processing: 182
2020-04-10 20:37:03,878 - root - INFO - Waiting: 0, Currently Processing: 182
2020-04-10 20:37:03,878 - root - INFO - Waiting: 0, Currently Processing: 182
2020-04-10 20:37:03,878 - root - INFO - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - INFO - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - INFO - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:03,878 - root - INFO - 10: Up Workers: 1986, Busy Workers: 182
2020-04-10 20:37:08,926 - root - DEBUG - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - DEBUG - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - DEBUG - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - DEBUG - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - INFO - Waiting: 0, Currently Processing: 19
2020-04-10 20:37:08,926 - root - INFO - Waiting: 0, Currently Processing: 19
2020-04-10 20:37:08,926 - root - INFO - Waiting: 0, Currently Processing: 19
2020-04-10 20:37:08,926 - root - INFO - Waiting: 0, Currently Processing: 19
2020-04-10 20:37:08,926 - root - INFO - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - INFO - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - INFO - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:08,926 - root - INFO - 15: Up Workers: 1997, Busy Workers: 19
2020-04-10 20:37:13,972 - root - DEBUG - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - DEBUG - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - DEBUG - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - DEBUG - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:13,972 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:13,972 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:13,972 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:13,972 - root - INFO - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - INFO - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - INFO - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:13,972 - root - INFO - 20: Up Workers: 1997, Busy Workers: 1
2020-04-10 20:37:19,016 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:19,016 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:19,016 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:19,016 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:19,016 - root - INFO - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - INFO - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - INFO - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:19,016 - root - INFO - 25: Up Workers: 2033, Busy Workers: 1
2020-04-10 20:37:24,060 - root - DEBUG - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - DEBUG - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - DEBUG - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - DEBUG - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:24,060 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:24,060 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:24,060 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:24,060 - root - INFO - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - INFO - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - INFO - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:24,060 - root - INFO - 30: Up Workers: 2044, Busy Workers: 1
2020-04-10 20:37:29,104 - root - DEBUG - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,104 - root - DEBUG - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,104 - root - DEBUG - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,104 - root - DEBUG - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,104 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:29,104 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:29,104 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:29,104 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:29,105 - root - INFO - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,105 - root - INFO - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,105 - root - INFO - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:29,105 - root - INFO - 35: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - DEBUG - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - DEBUG - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - DEBUG - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - DEBUG - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:34,146 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:34,146 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:34,146 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:34,146 - root - INFO - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - INFO - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - INFO - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:34,146 - root - INFO - 40: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,191 - root - DEBUG - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,191 - root - DEBUG - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,191 - root - DEBUG - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,191 - root - DEBUG - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,192 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:39,192 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:39,192 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:39,192 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:39,192 - root - INFO - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,192 - root - INFO - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,192 - root - INFO - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:39,192 - root - INFO - 45: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,234 - root - DEBUG - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,234 - root - DEBUG - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,234 - root - DEBUG - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,234 - root - DEBUG - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,234 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:44,234 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:44,234 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:44,234 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:44,235 - root - INFO - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,235 - root - INFO - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,235 - root - INFO - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:44,235 - root - INFO - 50: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,278 - root - DEBUG - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,278 - root - DEBUG - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,278 - root - DEBUG - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,278 - root - DEBUG - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,278 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:49,278 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:49,278 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:49,278 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:49,279 - root - INFO - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,279 - root - INFO - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,279 - root - INFO - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:49,279 - root - INFO - 55: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - DEBUG - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - DEBUG - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - DEBUG - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - DEBUG - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:54,326 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:54,326 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:54,326 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:54,326 - root - INFO - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - INFO - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - INFO - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:54,326 - root - INFO - 60: Up Workers: 2045, Busy Workers: 1
2020-04-10 20:37:59,371 - root - DEBUG - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - DEBUG - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - DEBUG - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - DEBUG - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:59,371 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:59,371 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:59,371 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:37:59,371 - root - INFO - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - INFO - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - INFO - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:37:59,371 - root - INFO - 65: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - DEBUG - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - DEBUG - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - DEBUG - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - DEBUG - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:04,415 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:04,415 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:04,415 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:04,415 - root - INFO - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - INFO - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - INFO - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:04,415 - root - INFO - 70: Up Workers: 2046, Busy Workers: 1
2020-04-10 20:38:09,459 - root - DEBUG - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,459 - root - DEBUG - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,459 - root - DEBUG - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,459 - root - DEBUG - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,460 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:09,460 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:09,460 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:09,460 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:09,460 - root - INFO - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,460 - root - INFO - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,460 - root - INFO - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:09,460 - root - INFO - 75: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,511 - root - DEBUG - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,511 - root - DEBUG - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,511 - root - DEBUG - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,511 - root - DEBUG - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,511 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:14,511 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:14,511 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:14,511 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:14,512 - root - INFO - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,512 - root - INFO - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,512 - root - INFO - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:14,512 - root - INFO - 80: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,558 - root - DEBUG - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,558 - root - DEBUG - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,558 - root - DEBUG - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,558 - root - DEBUG - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,559 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:19,559 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:19,559 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:19,559 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:19,559 - root - INFO - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,559 - root - INFO - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,559 - root - INFO - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:19,559 - root - INFO - 85: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - DEBUG - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - DEBUG - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - DEBUG - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - DEBUG - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:24,606 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:24,606 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:24,606 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:24,606 - root - INFO - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - INFO - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - INFO - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:24,606 - root - INFO - 90: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,652 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,652 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,652 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,652 - root - DEBUG - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,652 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:29,652 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:29,652 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:29,652 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:29,653 - root - INFO - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,653 - root - INFO - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,653 - root - INFO - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:29,653 - root - INFO - 95: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,702 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,702 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,702 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,702 - root - DEBUG - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,702 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:34,702 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:34,702 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:34,702 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:34,703 - root - INFO - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,703 - root - INFO - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,703 - root - INFO - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:34,703 - root - INFO - 100: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - DEBUG - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:39,781 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:39,781 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:39,781 - root - INFO - Waiting: 0, Currently Processing: 1
2020-04-10 20:38:39,781 - root - INFO - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - INFO - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - INFO - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:39,781 - root - INFO - 105: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:44,826 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:44,826 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:44,826 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:44,826 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:49,882 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:49,882 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:49,882 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:49,882 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:54,926 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:54,926 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:54,926 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:54,926 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 1
2020-04-10 20:38:54,933 - root - INFO - launching 32 new tasks....
2020-04-10 20:38:54,933 - root - INFO - launching 32 new tasks....
2020-04-10 20:38:54,933 - root - INFO - launching 32 new tasks....
2020-04-10 20:38:54,933 - root - INFO - launching 32 new tasks....
2020-04-10 20:38:59,973 - root - DEBUG - 126: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:38:59,973 - root - DEBUG - 126: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:38:59,973 - root - DEBUG - 126: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:38:59,973 - root - DEBUG - 126: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:39:05,019 - root - DEBUG - 131: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:39:05,019 - root - DEBUG - 131: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:39:05,019 - root - DEBUG - 131: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:39:05,019 - root - DEBUG - 131: Up Workers: 2067, Busy Workers: 2
2020-04-10 20:39:10,066 - root - DEBUG - 136: Up Workers: 0, Busy Workers: 1
2020-04-10 20:39:10,066 - root - DEBUG - 136: Up Workers: 0, Busy Workers: 1
2020-04-10 20:39:10,066 - root - DEBUG - 136: Up Workers: 0, Busy Workers: 1
2020-04-10 20:39:10,066 - root - DEBUG - 136: Up Workers: 0, Busy Workers: 1
2020-04-10 20:39:11,352 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:39:11,352 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:39:11,352 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:39:11,352 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:39:11,352 - root - INFO - Logging to 5b09d673382c0e0d824349a20fd99180.log
2020-04-10 20:39:33,182 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:39:33,182 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:39:33,182 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:39:33,182 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:39:33,182 - root - DEBUG - Python AST:
FunctionDef(name='TSQR',
    args=arguments(
        args=[arg(arg='A', annotation=Name(id='BigMatrix')),
            arg(arg='Vs', annotation=Name(id='BigMatrix')),
            arg(arg='Ts', annotation=Name(id='BigMatrix')),
            arg(arg='Rs', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'), args=[Num(n=0), Name(id='N')], keywords=[]),
            body=[
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Subscript(value=Name(id='Vs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Ts'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')]))),
                                Subscript(value=Name(id='Rs'), slice=Index(value=Tuple(elts=[Num(n=0), Name(id='j')])))])],
                    value=Call(func=Name(id='qr_factor'),
                        args=[Subscript(value=Name(id='A'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[]))],
            orelse=[]),
        For(target=Name(id='level'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=0),
                    Call(func=Name(id='ceiling'),
                        args=[
                            BinOp(left=Call(func=Name(id='log'), args=[Name(id='N')], keywords=[]),
                                op=Div,
                                right=Call(func=Name(id='log'), args=[Num(n=2)], keywords=[]))],
                        keywords=[])],
                keywords=[]),
            body=[
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=0),
                            Name(id='N'),
                            BinOp(left=Num(n=2), op=Pow, right=BinOp(left=Name(id='level'), op=Add, right=Num(n=1)))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Subscript(value=Name(id='Vs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Ts'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')]))),
                                        Subscript(value=Name(id='Rs'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='level'), op=Add, right=Num(n=1)),
                                                        Name(id='j')])))])],
                            value=Call(func=Name(id='qr_factor'),
                                args=[
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(value=Tuple(elts=[Name(id='level'), Name(id='j')]))),
                                    Subscript(value=Name(id='Rs'),
                                        slice=Index(
                                            value=Tuple(
                                                elts=[Name(id='level'),
                                                    BinOp(left=Name(id='j'),
                                                        op=Add,
                                                        right=BinOp(left=Num(n=2), op=Pow, right=Name(id='level')))])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2020-04-10 20:39:33,183 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:39:33,183 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:39:33,183 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:39:33,183 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:39:33,183 - root - DEBUG - IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=None),
            max=Ref(name='N', type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Ts', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)]),
                        IndexExpr(matrix_name='Rs', indices=[IntConst(val=0, type=None), Ref(name='j', type=None)])],
                    args=[IndexExpr(matrix_name='A', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None)]),
        For(var='level',
            min=IntConst(val=0, type=None),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log', e=Ref(name='N', type=None), type=None),
                    right=Mfunc(op='log', e=IntConst(val=2, type=None), type=None),
                    type=None),
                type=None),
            step=IntConst(val=1, type=None),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=None),
                    max=Ref(name='N', type=None),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=None),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=None),
                            right=IntConst(val=1, type=None),
                            type=None),
                        type=None),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=None),
                                            right=IntConst(val=1, type=None),
                                            type=None),
                                        Ref(name='j', type=None)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None), Ref(name='j', type=None)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=None),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=None),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=None),
                                                right=Ref(name='level', type=None),
                                                type=None),
                                            type=None)])],
                            kwargs=None,
                            type=None)])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>])

2020-04-10 20:39:33,184 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:39:33,184 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:39:33,184 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:39:33,184 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:39:33,184 - root - DEBUG - typed IR AST:
FuncDef(name='TSQR',
    args=['A', 'Vs', 'Ts', 'Rs', 'N'],
    body=[
        For(var='j',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                    output=[
                        IndexExpr(matrix_name='Vs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Ts',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                        IndexExpr(matrix_name='Rs',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='A',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>)]),
        For(var='level',
            min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
            max=Mfunc(op='ceiling',
                e=BinOp(op='Div',
                    left=Mfunc(op='log',
                        e=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    right=Mfunc(op='log',
                        e=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstFloatType'>),
                    type=<class 'numpywren.frontend.ConstFloatType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                For(var='j',
                    min=IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                    step=BinOp(op='Pow',
                        left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                        right=BinOp(op='Add',
                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            type=<class 'numpywren.frontend.LinearIntType'>),
                        type=<class 'numpywren.frontend.IntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function qr_factor at 0x7f123cb1c400>,
                            output=[
                                IndexExpr(matrix_name='Vs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Ts',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[
                                        BinOp(op='Add',
                                            left=Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                            type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='Rs',
                                    indices=[Ref(name='level', type=<class 'numpywren.frontend.LinearIntType'>),
                                        BinOp(op='Add',
                                            left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                            right=BinOp(op='Pow',
                                                left=IntConst(val=2, type=<class 'numpywren.frontend.ConstIntType'>),
                                                right=Ref(name='level',
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                type=<class 'numpywren.frontend.IntType'>),
                                            type=<class 'numpywren.frontend.IntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2020-04-10 20:39:36,955 - root - INFO - Starting with 2048 cores
2020-04-10 20:39:36,955 - root - INFO - Starting with 2048 cores
2020-04-10 20:39:36,955 - root - INFO - Starting with 2048 cores
2020-04-10 20:39:36,955 - root - INFO - Starting with 2048 cores
2020-04-10 20:39:36,955 - root - INFO - Starting with 2048 cores
2020-04-10 20:39:47,098 - root - DEBUG - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - DEBUG - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - DEBUG - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - DEBUG - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - DEBUG - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - INFO - Waiting: 0, Currently Processing: 177
2020-04-10 20:39:47,098 - root - INFO - Waiting: 0, Currently Processing: 177
2020-04-10 20:39:47,098 - root - INFO - Waiting: 0, Currently Processing: 177
2020-04-10 20:39:47,098 - root - INFO - Waiting: 0, Currently Processing: 177
2020-04-10 20:39:47,098 - root - INFO - Waiting: 0, Currently Processing: 177
2020-04-10 20:39:47,098 - root - INFO - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - INFO - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - INFO - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - INFO - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:47,098 - root - INFO - 10: Up Workers: 1935, Busy Workers: 177
2020-04-10 20:39:52,149 - root - DEBUG - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,149 - root - DEBUG - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,149 - root - DEBUG - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,149 - root - DEBUG - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,149 - root - DEBUG - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,149 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:52,149 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:52,149 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:52,149 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:52,149 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:52,150 - root - INFO - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,150 - root - INFO - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,150 - root - INFO - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,150 - root - INFO - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:52,150 - root - INFO - 15: Up Workers: 1962, Busy Workers: 18
2020-04-10 20:39:57,203 - root - DEBUG - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - DEBUG - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - DEBUG - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - DEBUG - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - DEBUG - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:57,203 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:57,203 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:57,203 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:57,203 - root - INFO - Waiting: 0, Currently Processing: 18
2020-04-10 20:39:57,203 - root - INFO - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - INFO - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - INFO - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - INFO - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:39:57,203 - root - INFO - 20: Up Workers: 1965, Busy Workers: 4
2020-04-10 20:40:02,267 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - DEBUG - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:02,267 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:02,267 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:02,267 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:02,267 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:02,267 - root - INFO - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - INFO - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - INFO - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - INFO - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:02,267 - root - INFO - 25: Up Workers: 2033, Busy Workers: 4
2020-04-10 20:40:07,317 - root - DEBUG - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - DEBUG - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - DEBUG - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - DEBUG - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - DEBUG - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:07,317 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:07,317 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:07,317 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:07,317 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:07,317 - root - INFO - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - INFO - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - INFO - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - INFO - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:07,317 - root - INFO - 30: Up Workers: 2040, Busy Workers: 4
2020-04-10 20:40:12,416 - root - DEBUG - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - DEBUG - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - DEBUG - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - DEBUG - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - DEBUG - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:12,416 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:12,416 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:12,416 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:12,416 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:12,416 - root - INFO - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - INFO - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - INFO - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - INFO - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:12,416 - root - INFO - 35: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - DEBUG - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - DEBUG - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - DEBUG - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - DEBUG - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - DEBUG - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:17,465 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:17,465 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:17,465 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:17,465 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:17,465 - root - INFO - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - INFO - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - INFO - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - INFO - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:17,465 - root - INFO - 40: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - DEBUG - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - DEBUG - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - DEBUG - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - DEBUG - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - DEBUG - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:22,511 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:22,511 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:22,511 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:22,511 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:22,511 - root - INFO - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - INFO - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - INFO - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - INFO - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:22,511 - root - INFO - 45: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,555 - root - DEBUG - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,555 - root - DEBUG - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,555 - root - DEBUG - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,555 - root - DEBUG - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,555 - root - DEBUG - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,556 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:27,556 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:27,556 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:27,556 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:27,556 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:27,556 - root - INFO - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,556 - root - INFO - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,556 - root - INFO - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,556 - root - INFO - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:27,556 - root - INFO - 50: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,600 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,600 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,600 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,600 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,600 - root - DEBUG - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,600 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:32,600 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:32,600 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:32,600 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:32,600 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:32,601 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,601 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,601 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,601 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:32,601 - root - INFO - 55: Up Workers: 2042, Busy Workers: 4
2020-04-10 20:40:37,755 - root - DEBUG - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - DEBUG - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - DEBUG - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - DEBUG - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - DEBUG - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:37,755 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:37,755 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:37,755 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:37,755 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:37,755 - root - INFO - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - INFO - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - INFO - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - INFO - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:37,755 - root - INFO - 60: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - DEBUG - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:42,801 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:42,801 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:42,801 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:42,801 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:42,801 - root - INFO - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - INFO - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - INFO - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - INFO - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:42,801 - root - INFO - 65: Up Workers: 2044, Busy Workers: 4
2020-04-10 20:40:47,891 - root - DEBUG - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - DEBUG - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - DEBUG - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - DEBUG - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - DEBUG - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:47,891 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:47,891 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:47,891 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:47,891 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:47,891 - root - INFO - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - INFO - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - INFO - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - INFO - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:47,891 - root - INFO - 70: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,937 - root - DEBUG - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,937 - root - DEBUG - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,937 - root - DEBUG - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,937 - root - DEBUG - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,937 - root - DEBUG - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,938 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:52,938 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:52,938 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:52,938 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:52,938 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:52,938 - root - INFO - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,938 - root - INFO - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,938 - root - INFO - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,938 - root - INFO - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:52,938 - root - INFO - 75: Up Workers: 2045, Busy Workers: 4
2020-04-10 20:40:57,992 - root - DEBUG - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - DEBUG - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - DEBUG - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - DEBUG - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - DEBUG - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:57,992 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:57,992 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:57,992 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:57,992 - root - INFO - Waiting: 0, Currently Processing: 4
2020-04-10 20:40:57,992 - root - INFO - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - INFO - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - INFO - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - INFO - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:40:57,992 - root - INFO - 80: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:41:03,040 - root - DEBUG - 86: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:41:03,040 - root - DEBUG - 86: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:41:03,040 - root - DEBUG - 86: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:41:03,040 - root - DEBUG - 86: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:41:03,040 - root - DEBUG - 86: Up Workers: 2047, Busy Workers: 4
2020-04-10 20:41:08,099 - root - DEBUG - 91: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:08,099 - root - DEBUG - 91: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:08,099 - root - DEBUG - 91: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:08,099 - root - DEBUG - 91: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:08,099 - root - DEBUG - 91: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:13,144 - root - DEBUG - 96: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:13,144 - root - DEBUG - 96: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:13,144 - root - DEBUG - 96: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:13,144 - root - DEBUG - 96: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:13,144 - root - DEBUG - 96: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:18,284 - root - DEBUG - 101: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:18,284 - root - DEBUG - 101: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:18,284 - root - DEBUG - 101: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:18,284 - root - DEBUG - 101: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:18,284 - root - DEBUG - 101: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:23,330 - root - DEBUG - 106: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:23,330 - root - DEBUG - 106: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:23,330 - root - DEBUG - 106: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:23,330 - root - DEBUG - 106: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:23,330 - root - DEBUG - 106: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:28,376 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:28,376 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:28,376 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:28,376 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:28,376 - root - DEBUG - 111: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:33,421 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:33,421 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:33,421 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:33,421 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:33,421 - root - DEBUG - 116: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:38,517 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:38,517 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:38,517 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:38,517 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:38,517 - root - DEBUG - 121: Up Workers: 2048, Busy Workers: 4
2020-04-10 20:41:38,524 - root - INFO - launching 32 new tasks....
2020-04-10 20:41:38,524 - root - INFO - launching 32 new tasks....
2020-04-10 20:41:38,524 - root - INFO - launching 32 new tasks....
2020-04-10 20:41:38,524 - root - INFO - launching 32 new tasks....
2020-04-10 20:41:38,524 - root - INFO - launching 32 new tasks....
2020-04-10 20:41:43,562 - root - DEBUG - 126: Up Workers: 2075, Busy Workers: 6
2020-04-10 20:41:43,562 - root - DEBUG - 126: Up Workers: 2075, Busy Workers: 6
2020-04-10 20:41:43,562 - root - DEBUG - 126: Up Workers: 2075, Busy Workers: 6
2020-04-10 20:41:43,562 - root - DEBUG - 126: Up Workers: 2075, Busy Workers: 6
2020-04-10 20:41:43,562 - root - DEBUG - 126: Up Workers: 2075, Busy Workers: 6
2020-04-10 20:41:48,654 - root - DEBUG - 131: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:48,654 - root - DEBUG - 131: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:48,654 - root - DEBUG - 131: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:48,654 - root - DEBUG - 131: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:48,654 - root - DEBUG - 131: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:53,698 - root - DEBUG - 136: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:53,698 - root - DEBUG - 136: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:53,698 - root - DEBUG - 136: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:53,698 - root - DEBUG - 136: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:53,698 - root - DEBUG - 136: Up Workers: 2075, Busy Workers: 5
2020-04-10 20:41:58,810 - root - DEBUG - 141: Up Workers: 4, Busy Workers: 4
2020-04-10 20:41:58,810 - root - DEBUG - 141: Up Workers: 4, Busy Workers: 4
2020-04-10 20:41:58,810 - root - DEBUG - 141: Up Workers: 4, Busy Workers: 4
2020-04-10 20:41:58,810 - root - DEBUG - 141: Up Workers: 4, Busy Workers: 4
2020-04-10 20:41:58,810 - root - DEBUG - 141: Up Workers: 4, Busy Workers: 4
